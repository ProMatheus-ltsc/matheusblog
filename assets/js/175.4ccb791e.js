(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{1444:function(s,a,n){"use strict";n.r(a);var e=n(24),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),n("p",[s._v("类加载子系统是负责将类从磁盘或网络读到JVM内存，然后交给执行引擎执行，如图所示。\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/dee3cbc1a80f4dc5b23b71d1b39960e6.png",alt:"在这里插入图片描述"}}),s._v("\n说明：学习类加载有助于我们更深入地理解JAVA类成员的初始化过程，运行过程。并可以为后续的线上问题的解决及调优提供一种基础保障。")]),s._v(" "),n("h1",{attrs:{id:"类加载器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类加载器"}},[s._v("#")]),s._v(" 类加载器")]),s._v(" "),n("h2",{attrs:{id:"是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[s._v("#")]),s._v(" 是什么？")]),s._v(" "),n("p",[s._v("类加载器是在类运行时负责将类读到内存的一个对象，其类型为ClassLoader类型，此类型为抽象类型，通常以父类形式出现。\n类加载器对象常用方法说明：")]),s._v(" "),n("ol",[n("li",[s._v("getParent() 返回类加载器的父类加载器（不继承而是组合）。")]),s._v(" "),n("li",[s._v("loadClass(String name) 加载名称为 name的类.")]),s._v(" "),n("li",[s._v("findClass(String name) 查找名称为 name的类.")]),s._v(" "),n("li",[s._v("findLoadedClass(String name) 查找名称为 name的已经被加载过的类")]),s._v(" "),n("li",[s._v("defineClass(String name, byte[] b, int off, int len) 把字节数组 b中的内容转换成 Java 类。")]),s._v(" "),n("li",[s._v("……")])]),s._v(" "),n("h2",{attrs:{id:"如何获取"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何获取"}},[s._v("#")]),s._v(" 如何获取？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("package com.java.jvm.loader;\npublic class ClassLoaderTypeTests {\n    public static void main(String[] args) {\n        //获取系统类加载器(也是我们的应用类加载器)\n        ClassLoader systemClassLoader = \nClassLoader.getSystemClassLoader();\n//sun.misc.Launcher$AppClassLoader@18b4aac2\n        System.out.println(systemClassLoader); \n        //获取其上层：扩展类加载器\n        ClassLoader extClassLoader = systemClassLoader.getParent();\n//sun.misc.Launcher$ExtClassLoader@2503dbd3\n        System.out.println(extClassLoader);\n        //获取其上层：获取不到引导类加载器(基于c/c++实现)\n        ClassLoader bootstrapClassLoader = extClassLoader.getParent();\n        System.out.println(bootstrapClassLoader);//null\n\n        //对于用户自定义类来说：默认使用系统类加载器进行加载\n        ClassLoader classLoader = \nClassLoaderTypeTests.class.getClassLoader();\n//sun.misc.Launcher$AppClassLoader@18b4aac2\n        System.out.println(classLoader); \n        //String类使用引导类加载器进行加载的。\n//Java的核心类库都是使用引导类加载器进行加载的。\n        ClassLoader classLoader1 = String.class.getClassLoader();\n        System.out.println(classLoader1);//null\n\n    }\n}\n12345678910111213141516171819202122232425262728\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("p",[s._v("这些类加载器的关系，例如：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/bd27c6f62817423180ad3c31d0faa692.png",alt:"在这里插入图片描述"}}),s._v("\n课堂练习：获取Bootstrap ClassLoader 可以加载的资源路径有哪些？代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.java.jvm.loader;\nimport sun.misc.Launcher;\n\nimport java.io.File;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URL;\npublic class ClassLoaderDirTests {\n    public static void main(String[] args) \nthrows Exception {\n        //获取Bootstrap ClassLoader可以加载的类\n        URL[] urls = Launcher.getBootstrapClassPath().getURLs();\n        for(URL url:urls){\n            System.out.println(url);\n        }\n        //获取String类的类加载器\n        ClassLoader classLoader = String.class.getClassLoader();\n        System.out.println(classLoader);//null\n\n        //获取ExtClassLoader可以加载的路径\n        ClassLoader parent = \nClassLoader.getSystemClassLoader().getParent();\n\n        Class<? extends ClassLoader> aClass = parent.getClass();\n        Method getExtDirs = aClass.getDeclaredMethod("getExtDirs");\n        getExtDirs.setAccessible(true);\n        \nFile[] files = (File[])getExtDirs.invoke(parent);\n        for(File f:files){\n            System.out.println(f.getPath());\n        }\n    }\n}\n123456789101112131415161718192021222324252627282930313233\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")])]),n("h2",{attrs:{id:"双亲委派模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派模型"}},[s._v("#")]),s._v(" 双亲委派模型")]),s._v(" "),n("p",[s._v("Java虚拟机对class文件采用的是按需加载的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虚拟机采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式。如图所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/e2ab16b560be4153bd70e6c000224076.png",alt:"在这里插入图片描述"}}),s._v("\n基于双薪委派模型进行类的加载，其具体过程如下：")]),s._v(" "),n("ol",[n("li",[s._v("如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；")]),s._v(" "),n("li",[s._v("如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；")]),s._v(" "),n("li",[s._v("如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。")]),s._v(" "),n("li",[s._v("父类加载器一层一层往下分配任务，如果子类加载器能加载，则加载此类，如果将加载任务分配至系统类加载器也无法加载此类，则抛出异常。")])]),s._v(" "),n("p",[s._v("具体代码我们可以参考ClassLoader#loadClass方法的具体实现，例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("protected Class<?> loadClass(String name, boolean resolve)\n    throws ClassNotFoundException\n{\n    synchronized (getClassLoadingLock(name)) {\n        // First, check if the class has already been loaded\n        Class<?> c = findLoadedClass(name);\n        if (c == null) {\n            long t0 = System.nanoTime();\n            try {\n                if (parent != null) {\n                    c = parent.loadClass(name, false);\n                } else {\n                    c = findBootstrapClassOrNull(name);\n                }\n            } catch (ClassNotFoundException e) {\n                // ClassNotFoundException thrown if class not found\n                // from the non-null parent class loader\n            }\n\n            if (c == null) {\n                // If still not found, then invoke findClass in order\n                // to find the class.\n                long t1 = System.nanoTime();\n                c = findClass(name);\n\n                // this is the defining class loader; record the stats\n                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                sun.misc.PerfCounter.getFindClasses().increment();\n            }\n        }\n        if (resolve) {\n            resolveClass(c);\n        }\n        return c;\n    }\n}\n\n1234567891011121314151617181920212223242526272829303132333435363738\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br")])]),n("p",[s._v("基于这种双亲委派机制实现了类加载时的优先级层次关系，同时也可以保证同一个类只被一个加载器加载（例如Object类只会被BootstrapClassLoader加载），这样更有利于java程序的稳定运行。")]),s._v(" "),n("h2",{attrs:{id:"简易类加载实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简易类加载实现"}},[s._v("#")]),s._v(" 简易类加载实现")]),s._v(" "),n("p",[s._v("为什么我们要自己定义类加载器呢？在Java的日常应用程序开发中，类的加载几乎是由JDK默认提供的类加载器相互配合来完成类的加载的，但我们也可以自定义类加载器，来定制类的加载方式。例如：\n 修改类的加载方式(打破类的双亲委派模型)\n 扩展加载源（例如从数据库中加载类）\n 防止源码泄漏（对字节码文件进行加密，用时再通过自定义类加载器对其进行解密）\n 隔离类的加载(不同框架有相同全限定名的类)")]),s._v(" "),n("p",[s._v("如何创建自定义类加载器呢？一种简单的方式就是继承URLClassLoader，此类可以直接从指定目录、jar包、网络中加载指定的类资源。")]),s._v(" "),n("p",[s._v("URLClassLoader继承ClassLoader，可以从指定目录、jar包、网络中加载指定的类资源，我们自己定义类加载器，最简单的方式就是继承URLClassLoader进行类加载实践。代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("package com.java.jvm.loader;\n\nimport java.net.URL;\nimport java.net.URLClassLoader;\n\n/**\n * 自己构建类加载器(基于URLClassLoader进行落地实现)\n */\npublic class SimpleUrlClassLoader extends URLClassLoader {\n    public SimpleUrlClassLoader(URL[] urls, ClassLoader parent) {\n        super(urls, parent);\n    }\n}\n\n1234567891011121314\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("编写测试类")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.java.jvm.loader;\n\nimport java.io.File;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class SimpleUrlClassLoaderTests {\n    public static void main(String[] args) throws MalformedURLException, ClassNotFoundException {\n        File file=new File("E:\\\\TCGBIV\\\\DEVCODES\\\\CGB2202CODES");//这个就为你pkg这个包所在的路径\n        URL[] urls={file.toURI().toURL()};\n        SimpleUrlClassLoader classLoader=new SimpleUrlClassLoader(urls,null);\n        Class<?> aClass = classLoader.loadClass("pkg.HelloJVM");\n        System.out.println(aClass.getClassLoader().getParent());\n    }\n}\n\n12345678910111213141516\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("p",[s._v("其中，pkg包下的HelloJVM类定义如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package pkg;\npublic class HelloJVM{\n\tpublic static void main(String[] args){\n\t\tint a=10;\n\t\tint b=20;\n\t\tint c=a+b;\n\t\tSystem.out.println("HelloJVM,c="+c);\n\t}\n}\n123456789\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"自定义类加载器进阶实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义类加载器进阶实现"}},[s._v("#")]),s._v(" 自定义类加载器进阶实现")]),s._v(" "),n("p",[s._v("我们可以通过继承java.lang.ClassLoader抽象类的方式，实现自己的类加载器，以满足一些特殊的需求。建议把自定义的类加载逻辑写在findclass()方法中。例如:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.java.jvm.loader;\n\nimport java.io.*;\n\n/**\n * ClassLoader没有抽象方法为什么还要将此类定义为抽象类？\n * 外界不允许直接构建此类对象\n */\npublic class DefaultAppClassLoader extends ClassLoader{\n\n    private String baseDir;\n\n    public DefaultAppClassLoader(String baseDir) {\n        this.baseDir = baseDir;\n    }\n    /**\n     * 查找类\n     * @param className 类全名 (eg,com.java.jvm.HelloJVM)\n     * @return 返回值为字节码对象(这就说明了一个问题，类加载时字节码对象就创建了)\n     * @throws ClassNotFoundException\n     */\n    @Override\n    protected Class<?> findClass(String className) throws ClassNotFoundException {\n        //1.基于类名读取类(从磁盘指定路径下找到对应的类，并基于io对内容进行读取)，并将信息存储到字节数组。\n        byte[] data=readClassInfo(className);\n        //2.将字节数组中的信息转换字节码对象\n        if(data==null||data.length==0)\n            throw new ClassNotFoundException();\n        return defineClass(className, data,0 , data.length);\n    }\n    /**\n     * 读取字节码信息\n     * @param className\n     * @return\n     */\n    private byte[] readClassInfo(String className){\n        //1.获取className的绝对路径\n        String absFilePath=baseDir+className.replace(\'.\', File.separatorChar)+".class";\n        //2.判定文件是否存在\n        InputStream in=null;\n        File file=new File(absFilePath);\n        try {\n            if (!file.exists()) throw new FileNotFoundException();\n            //3.构建流对象\n            in = new FileInputStream(file);\n            //4.读数据并返回\n            byte[] data = new byte[in.available()];\n            in.read(data);\n            return data;\n        }catch (IOException ex){\n            ex.printStackTrace();\n            throw new RuntimeException("文件不存在或读取失败");\n        }finally {\n            //5.释放资源\n            if(in!=null)try{in.close();}catch (Exception e){e.printStackTrace();}\n        }\n    }\n}\n\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br")])]),n("p",[s._v("说明：自己写类加载器一般不建议重写loadClass方法，当然不是不可以重写。\n定义测试方法：假如使用自定义类加载器加载我们指定的类，要求被加载的类应与当前类不在同一个命名空间范围内，否则可能直接使用AppClassLoader进行类加载。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.java.jvm.loader;\n\npublic class DefaultAppClassLoaderTests {\n    public static void main(String[] args) throws ClassNotFoundException {\n        //String baseDir="E:\\\\TCGBIV\\\\DEVCODES\\\\CGB2202CODES\\\\";\n        String baseDir="E:\\\\TCGBIV\\\\DEVCODES\\\\CGB2202CODES\\\\01-java\\\\target\\\\classes\\\\";\n        DefaultAppClassLoader loader=new DefaultAppClassLoader(baseDir);\n        //Class<?> aClass = loader.loadClass("pkg.HelloJVM");\n        Class<?> aClass = loader.loadClass("com.java.jvm.HelloJVM");\n        System.out.println(aClass);\n        System.out.println(aClass.getClassLoader());\n    }\n}\n\n1234567891011121314\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("输出的类加载名称应该为我们自己定义的类加载器名称。")]),s._v(" "),n("h2",{attrs:{id:"打破双亲委派机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#打破双亲委派机制"}},[s._v("#")]),s._v(" 打破双亲委派机制")]),s._v(" "),n("p",[s._v("自定义类加载器，重写loadClass方法，实现类的加载，例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("package com.java.jvm.loader;\n\nimport java.io.*;\n\n/**\n * ClassLoader没有抽象方法为什么还要将此类定义为抽象类？外界不允许直接构建此类对象\n */\npublic class BreakDoubleParentAppClassLoader extends ClassLoader{\n\n    private String baseDir;\n\n    public BreakDoubleParentAppClassLoader(String baseDir) {\n        this.baseDir = baseDir;\n    }\n\n    /**\n     * 重写loadClass方法，打破双亲委派模型\n     * @param name\n     * @return\n     * @throws ClassNotFoundException\n     */\n    @Override\n    public Class<?> loadClass(String name) throws ClassNotFoundException {\n        try {\n            //我们自己先去加载，加载不了(例如java.lang.Object)则抛出异常\n            return findClass(name);\n        }catch (Exception e){\n            //自己加载不了，再交给parent加载器对加载\n            return super.loadClass(name);\n        }\n    }\n    /**\n     * 查找类\n     * @param className 类全名 (eg,com.java.jvm.HelloJVM)\n     * @return 返回值为字节码对象(这就说明了一个问题，类加载时字节码对象就创建了)\n     * @throws ClassNotFoundException\n     */\n    @Override\n    protected Class<?> findClass(String className) throws ClassNotFoundException {\n        //1.基于类名读取类(从磁盘指定路径下找到对应的类，并基于io对内容进行读取)，并将信息存储到字节数组。\n        byte[] data=readClassInfo(className);\n        //2.将字节数组中的信息转换字节码对象\n        if(data==null||data.length==0)\n            throw new ClassNotFoundException();\n        return defineClass(className, data,0 , data.length);\n    }\n    /**\n     * 读取字节码信息\n     * @param className\n     * @return\n     */\n    private byte[] readClassInfo(String className){\n        //1.获取className的绝对路径\n        String absFilePath=\n                baseDir+className.replace('.', File.separatorChar)+\".class\";\n        //2.判定文件是否存在\n        InputStream in=null;\n        File file=new File(absFilePath);\n        try {\n            if (!file.exists()) throw new FileNotFoundException();\n            //3.构建流对象\n            in = new FileInputStream(file);\n            //4.读数据并返回\n            byte[] data = new byte[in.available()];\n            in.read(data);\n            return data;\n        }catch (IOException ex){\n            //ex.printStackTrace();\n            throw new RuntimeException(ex);\n        }finally {\n            //5.释放资源\n            if(in!=null)try{in.close();}catch (Exception e){e.printStackTrace();}\n        }\n    }\n}\n\n12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br")])]),n("p",[s._v("编写测试，进行单元测试，例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.java.jvm.loader;\n\npublic class BreakDoubleParentAppClassLoaderTests {//AppClassLoader\n    public static void main(String[] args) throws ClassNotFoundException {\n        String baseDir="E:\\\\TCGBIV\\\\DEVCODES\\\\CGB2202CODES\\\\";\n        BreakDoubleParentAppClassLoader loader1=\n               new BreakDoubleParentAppClassLoader(baseDir);\n        Class<?> aClass1 = loader1.loadClass("pkg.HelloJVM");\n        System.out.println(aClass1.getClassLoader());\n\n        BreakDoubleParentAppClassLoader loader2=\n                new BreakDoubleParentAppClassLoader(baseDir);\n        Class<?> aClass2 = loader2.loadClass("pkg.HelloJVM");\n        System.out.println(aClass2.getClassLoader());\n        System.out.println(aClass1==aClass2);\n        //false表示同一个class在内存中可以存在多个字节码对象（类对象）\n  \n    }\n}\n12345678910111213141516171819\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[s._v("思考：试试用这个类加载器去加载classpath下的类，试试是什么效果。")]),s._v(" "),n("h1",{attrs:{id:"类加载过程分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类加载过程分析"}},[s._v("#")]),s._v(" 类加载过程分析")]),s._v(" "),n("h2",{attrs:{id:"类加载步骤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类加载步骤"}},[s._v("#")]),s._v(" 类加载步骤")]),s._v(" "),n("p",[s._v("类加载的一个基本步骤如下：")]),s._v(" "),n("ol",[n("li",[s._v("通过一个类的全限定名（类全名）来获取其定义的二进制字节流。")]),s._v(" "),n("li",[s._v("将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。")]),s._v(" "),n("li",[s._v("在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口，如图所示。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/4e287fb47abd4fdd9e69bafce145d074.png",alt:"在这里插入图片描述"}}),s._v("\n我们看到加载过程中大致可分为加载、验证、准备、解析、初始化几大阶段，但这几个阶段的执行顺序又是怎样的呢？JVM规范中是这样说的：")]),s._v(" "),n("ol",[n("li",[s._v("加载、验证、准备和初始化发生的顺序是确定的，而解析阶段则不一定.")]),s._v(" "),n("li",[s._v("加载、验证、准备和初始化这四个阶段按顺序开始不一定按顺序完成。\n另外，一个已经加载的类被卸载的几率很小，至少被卸载的时间是不确定的，假如需要卸载的话可尝试System.exit(0);")])]),s._v(" "),n("h2",{attrs:{id:"类加载路径"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类加载路径"}},[s._v("#")]),s._v(" 类加载路径")]),s._v(" "),n("p",[s._v("JVM 从何处加载我们要使用的类呢？主要从如下三个地方：")]),s._v(" "),n("ol",[n("li",[s._v("JDK 基础类库中的类(lib\\jar,lib\\ext)。")]),s._v(" "),n("li",[s._v("第三方类库中的类。")]),s._v(" "),n("li",[s._v("应用程序类库中的类。")])]),s._v(" "),n("h2",{attrs:{id:"类加载方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类加载方式"}},[s._v("#")]),s._v(" 类加载方式")]),s._v(" "),n("p",[s._v("JVM 中的类加载方式主要两种：隐式加载和显式加载.\n"),n("strong",[s._v("1. 隐式加载")])]),s._v(" "),n("ol",[n("li",[s._v("访问类的静态成员(例如类变量，静态方法)")]),s._v(" "),n("li",[s._v("构建类的实例对象(例如使用new 关键字构建对象或反射构建对象)")]),s._v(" "),n("li",[s._v("构建子类实例对象（构建类的对象时首先会加载父类类型）")])]),s._v(" "),n("p",[n("strong",[s._v("2. 显式加载")])]),s._v(" "),n("ol",[n("li",[s._v("ClassLoader.loadClass(…)")]),s._v(" "),n("li",[s._v("Class.forName(…)")])]),s._v(" "),n("p",[s._v("代码分析：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class ClassA{\n\tstatic {\n\t\tSystem.out.println("ClassA");\n\t}\n}\npublic class ClassLoaderTraceTests{\n\t\n\tpublic static void main(String[] args)throws Exception {\n\t\t\n\t\t//ClassLoader systemClassLoader =\n                //ClassLoader.getSystemClassLoader();\t\t \n//loader.loadClass("com.java.jvm.loader.ClassA");\n\t\tClass.forName("com.java.jvm.loader.ClassA");\n\t\t\n\t}\n\t\n}\n1234567891011121314151617\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("说明：")]),s._v(" "),n("ol",[n("li",[s._v("通过ClassLoader对象的loadClass方法加载类不会执行静态代码块。")]),s._v(" "),n("li",[s._v("可通过指定运行参数，查看类的加载顺序。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("-XX:+TraceClassLoading\n1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/74703e62bf724e96b998f48aedcffd79.png",alt:"在这里插入图片描述"}})]),s._v(" "),n("h1",{attrs:{id:"类链接-linking-分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类链接-linking-分析"}},[s._v("#")]),s._v(" 类链接(Linking)分析")]),s._v(" "),n("h2",{attrs:{id:"验证-verification"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#验证-verification"}},[s._v("#")]),s._v(" 验证(Verification）")]),s._v(" "),n("p",[s._v("这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。\n验证阶段大致会完成4个阶段的检验动作：")]),s._v(" "),n("ol",[n("li",[s._v("文件格式的验证（魔数，版本号，常量池，访问标志，当前类索引，…）。")]),s._v(" "),n("li",[s._v("元数据验证（int a=10，其中int a就为元数据）。")]),s._v(" "),n("li",[s._v("字节码合法性验证（同一个.java,生成的字节码结构是固定，例如都是16进制）。")]),s._v(" "),n("li",[s._v("符号引用验证（Class文件中以CONSTANT_Class_info、\nCONSTANT_Fieldref_info等常量形式出现）\n说明：验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用-Xverify:none参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。")])]),s._v(" "),n("h2",{attrs:{id:"准备-preparation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#准备-preparation"}},[s._v("#")]),s._v(" 准备(Preparation)")]),s._v(" "),n("p",[s._v("准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。")]),s._v(" "),n("ol",[n("li",[s._v("类变量（static）内存分配。")]),s._v(" "),n("li",[s._v("按类型进行初始默认值分配（如0、0L、null、false等）。\n例如：假设一个类变量的定义为：public static int value = 3；那么变量value在准备阶段过后的初始值为0，而不是3，把value赋值为3的动作将在初始化阶段才会执行。")]),s._v(" "),n("li",[s._v("如果类字段的字段属性表中存在ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值。\n例如：假设上面的类变量value被定义为： public static final int value = 3；编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为3")])]),s._v(" "),n("h2",{attrs:{id:"解析-resolution"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解析-resolution"}},[s._v("#")]),s._v(" 解析(Resolution)")]),s._v(" "),n("p",[s._v("解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程,其中：")]),s._v(" "),n("ol",[n("li",[s._v("符号引用：就是一组符号（例如CONSTANT_Fieldref_info）来描述目标，可以是任何字面量。")]),s._v(" "),n("li",[s._v("直接引用：就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。\n说明：相同的符号引用不同JVM机器上对应的直接引用可能不同，直接引用一般对应已加载到内存中的一个具体对象。")])]),s._v(" "),n("h1",{attrs:{id:"类初始化-initialization-分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类初始化-initialization-分析"}},[s._v("#")]),s._v(" 类初始化(Initialization)分析")]),s._v(" "),n("h2",{attrs:{id:"初始化方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化方式"}},[s._v("#")]),s._v(" 初始化方式")]),s._v(" "),n("p",[s._v("此阶段为类加载的最后一个阶段，这个阶段的JVM负责对类进行初始化，主要对类变量进行初始化。\n在Java中，对类变量进行初始值的设定有两种方式：")]),s._v(" "),n("ol",[n("li",[s._v("声明类变量时指定初始值。")]),s._v(" "),n("li",[s._v("使用静态代码块为类变量指定初始值。\n分析如下程序给出执行结果：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.java.jvm.loader;\n//-XX:+TraceClassLoading\nclass ClassB{\n   private static final ClassB instance=new ClassB();\n   static {\n      System.out.println("static{}.instance="+instance);\n   }\n   public ClassB(){\n      System.out.println("ClassB().instance="+instance);\n   }\n}\n\npublic class ClassLoadingInitTests {\n   public static void main(String[] args)throws Exception {\n      ClassLoader loader=ClassLoader.getSystemClassLoader();\n      Class.forName("com.java.jvm.loader.ClassB", false, loader);\n   }\n}\n\n12345678910111213141516171819\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[n("strong",[s._v("练习：分析如下代码，并对其进行加载，给出其输出结果。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.java.jvm.loader;\nclass ClassC{\n    private static  ClassC instance=new ClassC();\n    private static  Map<String,Object> map=new HashMap<>();\n    public ClassC(){\n        map.put("A", 100);\n        map.put("A", 200);\n        System.out.println(map);\n    }\n}\n12345678910\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h2",{attrs:{id:"类初始化时机"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类初始化时机"}},[s._v("#")]),s._v(" 类初始化时机")]),s._v(" "),n("p",[s._v("Java类在加载时，其初始化时机，可从如下两种方式进行分析：")]),s._v(" "),n("ol",[n("li",[s._v("主动使用：会执行加载、连接、初始化静态域")]),s._v(" "),n("li",[s._v("被动使用：只执行加载、连接，不初始化类静态域")])]),s._v(" "),n("p",[s._v("分析如下代码的执行结果,例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.java.jvm.loader;\nclass ClassAB{\n    public static int a=10;\n    static {\n        System.out.println("AB.a="+a);\n    }\n}\nclass ClassCD extends ClassAB{\n    static {\n        System.out.println("CD");\n    }\n}\n\npublic class ClassPassiveLoading {\n    public static void main(String[] args) {\n        System.out.println(ClassCD.a);\n    }\n}\n123456789101112131415161718\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("h1",{attrs:{id:"笔试代码分析实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#笔试代码分析实践"}},[s._v("#")]),s._v(" 笔试代码分析实践")]),s._v(" "),n("h2",{attrs:{id:"案例分析1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#案例分析1"}},[s._v("#")]),s._v(" 案例分析1")]),s._v(" "),n("p",[s._v("阅读如下代码，分析程序的执行结果：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("package com.java.jvm.loader;\n\npublic class ClassLoadingPractise01{\n    static int a=10;\n    static{\n        a=11;\n        b=11;\n    }\n    static int b=10;\n    public static void main(String[] args) {\n        System.out.println(a);\n        System.out.println(b);\n    }\n}\n1234567891011121314\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h2",{attrs:{id:"案例分析2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#案例分析2"}},[s._v("#")]),s._v(" 案例分析2")]),s._v(" "),n("p",[s._v("阅读如下代码，分析程序的执行结果：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.java.jvm.loader;\n\nclass C{\n    static{\n        System.out.println("1");\n    }\n    public C(){\n        System.out.println("2");\n    }\n}\nclass D extends C{\n    static{\n        System.out.println("a");\n    }\n    public D(){\n        System.out.println("b");\n    }\n}\npublic class ClassLoadingPractise02{\n    public static void main(String[] args) {\n        C c1=new D();\n        C c2=new D();\n    }\n}\n123456789101112131415161718192021222324\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("h1",{attrs:{id:"总结-summary"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结-summary"}},[s._v("#")]),s._v(" 总结(Summary)")]),s._v(" "),n("h2",{attrs:{id:"重难点分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重难点分析"}},[s._v("#")]),s._v(" 重难点分析")]),s._v(" "),n("p",[s._v(" 类加载过程。\n 常用类加载器。\n 双亲委派模型。")]),s._v(" "),n("h2",{attrs:{id:"faq分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#faq分析"}},[s._v("#")]),s._v(" FAQ分析")]),s._v(" "),n("p",[s._v(" JVM的类加载子系统解决了什么问题？(将指定位置的类读取到内存中)\n 你知道类的双亲委派模型吗？(这是类加载时的一个委派机制)\n 类的双亲委派机制可以解决什么问题？有什么缺点？\n 我们是否可以改变类的双亲委派机制实现类的加载？(可以)\n 你知道类加载的一个具体步骤吗，也就是一个具体的过程是怎样？\n 类加载时一定会执行静态代码块吗？\n 如何理解类中的主动加载和被动加载？\n static int a=10这条语句中将10赋值给a这个变量，发生在类加载的什么阶段？\n 我们构建子类对象时，是否会加载父类？假如会，那每次构建都会加载吗？\n 听说过热启动吗？(类修改完以后系统自动重启，重新加载这个类)\n 。。。。。。")]),s._v(" "),n("h2",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),n("p",[s._v("https://docs.oracle.com/javase/specs/index.html\nhttps://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\nhttps://docs.oracle.com/javase/specs/jvms/se8/html/index.html\nhttps://docs.oracle.com/javase/specs/jls/se8/html/index.html\nhttp://hg.openjdk.java.net/")])])}),[],!1,null,null,null);a.default=t.exports}}]);