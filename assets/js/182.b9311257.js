(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{1451:function(s,n,a){"use strict";a.r(n);var t=a(24),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),a("h2",{attrs:{id:"何为内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何为内存泄漏"}},[s._v("#")]),s._v(" 何为内存泄漏")]),s._v(" "),a("p",[s._v("动态分配的内存空间，在使用完毕后未得到释放，结果导致一直占据该内存单元，直到程序结束。这个现象称之为内存泄漏。因此良好的代码规范，可以有效地避免这些错误。")]),s._v(" "),a("h2",{attrs:{id:"内存泄漏带来的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏带来的问题"}},[s._v("#")]),s._v(" 内存泄漏带来的问题")]),s._v(" "),a("p",[s._v("1）长时间运行，程序会变卡，性能严重下降。\n2）OutOfMemoryError错误，系统直接挂掉。")]),s._v(" "),a("h2",{attrs:{id:"导致内存泄漏的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导致内存泄漏的原因"}},[s._v("#")]),s._v(" 导致内存泄漏的原因")]),s._v(" "),a("p",[s._v("1）大量使用静态变量(静态变量与程序生命周期一样)\n2）IO/连接资源用完没关闭(记得执行close操作)\n3）内部类的使用方式存在问题(实力内部类或默认引用外部类对象)\n4）缓存(Cache)应用不当(尽量不要使用强引用)\n5）ThreadLocal应用不当(用完记得执行remove操作)")]),s._v(" "),a("h2",{attrs:{id:"内存泄漏分析常用手段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏分析常用手段"}},[s._v("#")]),s._v(" 内存泄漏分析常用手段")]),s._v(" "),a("ol",[a("li",[s._v("应用内存分析工具 JProfiler, YourKit, Java VisualVM等。")]),s._v(" "),a("li",[s._v("在开发阶段时或者在测试环节，增加压力测试。")]),s._v(" "),a("li",[s._v("认真对待开发工具给出的告警提示，该关闭的资源尽早关闭。")]),s._v(" "),a("li",[s._v("选择合适的时机进行代码 review。")])]),s._v(" "),a("p",[s._v("通俗地说，我们可以将内存泄漏视为一种疾病，如果不治愈，随着时间的推移，它可能导致致命的应用程序崩溃。内存泄漏很难解决，发现它们需要对 Java 语言的复杂掌握和掌握。在处理内存泄漏时，没有一种万能的解决方案，因为泄漏可能通过各种不同的事件发生。")]),s._v(" "),a("p",[s._v("但是，如果我们采用最佳实践并定期执行严格的代码排查和分析，那么我们可以将应用程序中内存泄漏的风险降到最低。")]),s._v(" "),a("h1",{attrs:{id:"内存泄漏分析与实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏分析与实践"}},[s._v("#")]),s._v(" 内存泄漏分析与实践")]),s._v(" "),a("h2",{attrs:{id:"静态字段导致的内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态字段导致的内存泄漏"}},[s._v("#")]),s._v(" 静态字段导致的内存泄漏")]),s._v(" "),a("p",[s._v("演示通过静态字段造成的内存泄漏，代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('package com.java.jvm.leak;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\npublic class StaticMemoryLeakTests {\n    // 使用静态变量去存储大量的数据\n    public  static List<byte[]> bytes = new ArrayList<>();\n    public void makeBytes() {\n        for (int i = 0; i < 1000 * 200; i++) {\n            bytes.add(new byte[1024]);\n        }\n        System.out.println("Debug point 2");\n    }\n    public static void main(String[] args)throws Exception {\n        // 给时间我打开 visualVM 监控工具\n        TimeUnit.SECONDS.sleep(10);\n        System.out.println("Debug point 1");\n        new StaticMemoryLeakTests().makeBytes();\n        System.out.println("Debug point 3");\n        for (; ; ) {\n\n        }\n    }\n}\n1234567891011121314151617181920212223242526\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[s._v("运行代码，此时打开jdk/bin目录的jvisualvm，基于VisualVM 分析这段程序执行期间堆内存的使用情况。当程序运行从Debug point 1 到 Debug point 2 的时候，如预期的那样，堆内存增加了。 但当我们从Debug point 3 离开 makeBytes() 方法时，此时 JVM 不一定达到了触发 GC 的条件， 可以手动执行 Perform GC, 发现占用的Heap 内存并没有得到释放。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/57b55a5558ce41fb8eec4d7996e3079f.png",alt:"在这里插入图片描述"}}),s._v("\n演示非static属性值的存储以及内存分析，代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('package com.java.jvm.leak;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\npublic class NoStaticMemoryLeakTests {\n    // 使用非静态变量去存储大量的数据\n    public List<byte[]> bytes = new ArrayList<>();\n    public void makeBytes() {\n        for (int i = 0; i < 1000 * 200; i++) {\n            bytes.add(new byte[1024]);\n        }\n        System.out.println("Debug point 2");\n    }\n    public static void main(String[] args)throws Exception {\n        // 给时间我打开 visualVM 监控工具\n        TimeUnit.SECONDS.sleep(10);\n        System.out.println("Debug point 1");\n        new NoStaticMemoryLeakTests().makeBytes();\n        System.out.println("Debug point 3");\n        for (; ; ) {\n        }\n    }\n}\n12345678910111213141516171819202122232425\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[s._v("运行代码，此时打开jdk/bin目录的jvisualvm，基于VisualVM 分析这段程序执行期间堆内存的使用情况。当程序运行从Debug point 1 到 Debug point 2 的时候，如预期的那样，堆内存增加了。 但当我们从Debug point 3 离开 makeBytes() 方法时，此时 JVM 不一定达到了触发 GC 的条件， 可以手动执行 Perform GC, 发现占用的Heap 内存被释放了。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/e8440b91476d48f8b0d6bd03f5d31d3a.png",alt:"在这里插入图片描述"}})]),s._v(" "),a("h2",{attrs:{id:"不正确的hashcode和equals实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不正确的hashcode和equals实现"}},[s._v("#")]),s._v(" 不正确的hashCode和equals实现")]),s._v(" "),a("p",[s._v("当我们将一些pojo对象作为HashMap的key或者直接将pojo对象存储到HashSet集合时，假如没有正确重写equals() 和 hashCode()方法，可能就会出现内存泄漏问题。例如:\n当我们将一些pojo对象作为HashMap的key或者直接将pojo对象存储到HashSet集合时，假如没有正确重写equals() 和 hashCode()方法，可能就会出现内存泄漏问题。例如:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('package com.java.jvm.leak;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\nclass Pig {\n    private String name;\n    public Pig(String name) {\n        this.name = name;\n    }\n\n}\npublic class IncorrectHashAndEqualsTests {\n    public static void main(String[] args) throws Exception{\n  TimeUnit.SECONDS.sleep(10);\n        Map<Pig, Integer> pigs = new HashMap<>();\n        for (int i = 0; i < 10000 * 1000; i++) {\n            pigs.put(new Pig("佩奇"), i);\n            TimeUnit.MILLISECONDS.sleep(2);\n        }\n        System.out.println(pigs.size());\n    }\n}\n12345678910111213141516171819202122232425\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[s._v("一般存储到缓存的对象，都要重写hashCode()和 equals()方法。假设我们没有覆写，后果真的严重。")]),s._v(" "),a("p",[s._v("在Pig类中重写HashCode和equals方法，例如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    Pig pig = (Pig) o;\n    return Objects.equals(name, pig.name);\n}\n\n@Override\npublic int hashCode() {\n    return Objects.hash(name);\n}\n123456789101112\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h2",{attrs:{id:"内部类导致的内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部类导致的内存泄漏"}},[s._v("#")]),s._v(" 内部类导致的内存泄漏")]),s._v(" "),a("p",[s._v("在应用程序中使用这个内部类的对象不当，导致的内存泄漏，例如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("package com.java.jvm.leak;\n\nclass OuterClass {\n    private int o;\n    private byte[] bigObject = new byte[1024 * 10]; // 为了效果明显，做这样的测试。\n\n    class InnerClass {\n        private int i;\n\n        int add() {\n            return i++;\n        }\n    }\n\n    static class StaticNestedClass {\n        private int n;\n\n        int sub() {\n            return n--;\n        }\n    }\n}\npublic class InnerLeakTests {\n    public static void main(String[] args) {\n        for (int i = 0; i < 1024 * 10000; i++) {\n            OuterClass o = new OuterClass();\n            OuterClass.InnerClass innerClass = o.new InnerClass();\n            innerClass.add();\n        }\n    }\n}\n12345678910111213141516171819202122232425262728293031\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("h1",{attrs:{id:"小节面试分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小节面试分析"}},[s._v("#")]),s._v(" 小节面试分析")]),s._v(" "),a("p",[s._v("1）何为内存泄漏？\n\\2) 内存泄漏可能会带来什么问题？\n3）导致内存泄漏的原因有哪些？\n\\4) 内存泄漏分析常用的手段有哪些？")])])}),[],!1,null,null,null);n.default=e.exports}}]);