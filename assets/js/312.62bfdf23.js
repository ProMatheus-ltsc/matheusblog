(window.webpackJsonp=window.webpackJsonp||[]).push([[312],{1705:function(a,s,t){"use strict";t.r(s);var e=t(24),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"类层次关系和底层类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类层次关系和底层类型"}},[a._v("#")]),a._v(" 类层次关系和底层类型")]),a._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#实验介绍"}},[a._v("实验介绍")])]),t("li",[t("a",{attrs:{href:"#开发准备"}},[a._v("开发准备")])]),t("li",[t("a",{attrs:{href:"#实验步骤"}},[a._v("实验步骤")]),t("ul",[t("li",[t("a",{attrs:{href:"#scala-的类层次关系"}},[a._v("Scala 的类层次关系")])]),t("li",[t("a",{attrs:{href:"#所有类的公共子类-底层类型"}},[a._v("所有类的公共子类——底层类型")])])])])])]),t("p"),a._v(" "),t("h2",{attrs:{id:"实验介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实验介绍"}},[a._v("#")]),a._v(" 实验介绍")]),a._v(" "),t("h4",{attrs:{id:"实验内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实验内容"}},[a._v("#")]),a._v(" 实验内容")]),a._v(" "),t("p",[a._v("前面我们介绍了 Scala 的类的继承，本节我们将介绍 Scala 语言自身定义的类的层次关系和底层类型。")]),a._v(" "),t("h4",{attrs:{id:"实验知识点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实验知识点"}},[a._v("#")]),a._v(" 实验知识点")]),a._v(" "),t("ul",[t("li",[a._v("Scala 的类层次关系")]),a._v(" "),t("li",[a._v("底层类型")])]),a._v(" "),t("h4",{attrs:{id:"实验环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实验环境"}},[a._v("#")]),a._v(" 实验环境")]),a._v(" "),t("ul",[t("li",[a._v("Scala")]),a._v(" "),t("li",[a._v("Xfce 终端")])]),a._v(" "),t("h4",{attrs:{id:"适合人群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适合人群"}},[a._v("#")]),a._v(" 适合人群")]),a._v(" "),t("p",[a._v("本课程难度为一般，属于初级级别课程，适合零基础或具有 Java 编程基础的用户。")]),a._v(" "),t("h2",{attrs:{id:"开发准备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发准备"}},[a._v("#")]),a._v(" 开发准备")]),a._v(" "),t("p",[a._v("为了使用交互式 Scala 解释器，你可以在打开的终端中输入命令：")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("su")]),a._v(" -l hadoop "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#密码为 hadoop")]),a._v("\nscala\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("当出现 "),t("code",[a._v("scala>")]),a._v(" 开始的命令行提示符时，就说明你已经成功进入解释器了。如下图所示。")]),a._v(" "),t("blockquote",[t("p",[a._v("注意：由于在线实验环境的限制，在 Spark shell 中运行代码会稍微慢一点.")])]),a._v(" "),t("p",[t("img",{attrs:{src:"document-uid702660labid6307timestamp1525416596329-1654260335292112.png",alt:"1-2.1-1"}})]),a._v(" "),t("h2",{attrs:{id:"实验步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实验步骤"}},[a._v("#")]),a._v(" 实验步骤")]),a._v(" "),t("h3",{attrs:{id:"scala-的类层次关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala-的类层次关系"}},[a._v("#")]),a._v(" Scala 的类层次关系")]),a._v(" "),t("p",[a._v("在 Scala 中，所有的类都有一个公共的基类称为 "),t("code",[a._v("Any")]),a._v("，此外还定义了所有类的子类 Nothing，下面的图给出的 Scala 定义的类层次关系的一个概要：")]),a._v(" "),t("p",[t("img",{attrs:{src:"document-uid162034labid1679timestamp1454411336774-1654260346946114.png",alt:"11-3.1-1"}})]),a._v(" "),t("p",[a._v("由于所有的类都继承自 "),t("code",[a._v("Any")]),a._v("，因此 Scala 中的对象都可以使用 "),t("code",[a._v("==")]),a._v("、"),t("code",[a._v("!=")]),a._v(" 或 "),t("code",[a._v("equals")]),a._v(" 来比较，使用 "),t("code",[a._v("##")]),a._v(" 或 "),t("code",[a._v("hashCode")]),a._v(" 给出 "),t("code",[a._v("hash")]),a._v(" 值，使用 "),t("code",[a._v("toString")]),a._v(" 转为字符串。"),t("code",[a._v("Any")]),a._v(" 的 "),t("code",[a._v("==")]),a._v(" 和 "),t("code",[a._v("!=")]),a._v(" 定位为 "),t("code",[a._v("final")]),a._v("，因此不可以被子类重载。"),t("code",[a._v("==")]),a._v(" 实际上和 "),t("code",[a._v("equals")]),a._v(" 等价，"),t("code",[a._v("!=")]),a._v(" 和 "),t("code",[a._v("equals")]),a._v(" 的否定形式等价，因此重载 "),t("code",[a._v("equals")]),a._v(" 可以修改 "),t("code",[a._v("==")]),a._v(" 和 "),t("code",[a._v("!=")]),a._v(" 的定义。")]),a._v(" "),t("p",[a._v("基类 "),t("code",[a._v("Any")]),a._v(" 有两个子类："),t("code",[a._v("AnyVal")]),a._v(" 和 "),t("code",[a._v("AnyRef")]),a._v("。"),t("code",[a._v("AnyVal")]),a._v(" 是 "),t("code",[a._v("Scala")]),a._v(" 里每个内建值类型的父类。有九个这样的值类型："),t("code",[a._v("Byte")]),a._v("，"),t("code",[a._v("Short")]),a._v("，"),t("code",[a._v("Char")]),a._v("，"),t("code",[a._v("Int")]),a._v("，"),t("code",[a._v("Long")]),a._v("，"),t("code",[a._v("Float")]),a._v("，"),t("code",[a._v("Double")]),a._v("，"),t("code",[a._v("Boolean")]),a._v(" 和 "),t("code",[a._v("Unit")]),a._v("。其中的前八个对应到 Java 的基本数值类型，它们的值在运行时表示成 Java 的类型。")]),a._v(" "),t("p",[a._v("Scala 里，这些类的实例都写成字面量。例如，"),t("code",[a._v("42")]),a._v(" 是 "),t("code",[a._v("Int")]),a._v(" 的实例，“"),t("code",[a._v("x")]),a._v("” 是 "),t("code",[a._v("Char")]),a._v(" 的实例，"),t("code",[a._v("false")]),a._v(" 是 "),t("code",[a._v("Boolean")]),a._v(" 的实例。值类型都被定义为既是抽象的又是 "),t("code",[a._v("final")]),a._v(" 的，你不能使用 "),t("code",[a._v("new")]),a._v(" 创造这些类的实例。")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[a._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" error"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" is "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("abstract")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" cannot be instantiated\n              "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v("\n              "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("^")]),a._v("\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("另一个值类是 "),t("code",[a._v("Unit")]),a._v("，大致对应于 Java 的 "),t("code",[a._v("void")]),a._v(" 类型；它被用作不返回任何结果的方法。"),t("code",[a._v("Unit")]),a._v(" 只有一个实例值，被写作 "),t("code",[a._v("()")]),a._v("。")]),a._v(" "),t("p",[a._v("值类支持作为方法的通用的数学和布尔操作符。例如，"),t("code",[a._v("Int")]),a._v(" 有名为 "),t("code",[a._v("+")]),a._v(" 和 "),t("code",[a._v("*")]),a._v(" 的方法，"),t("code",[a._v("Boolean")]),a._v(" 有名为 "),t("code",[a._v("||")]),a._v(" 和 "),t("code",[a._v("&&")]),a._v(" 的方法。值类也从类 "),t("code",[a._v("Any")]),a._v(" 继承所有的方法。你可以在解释器里测试如下代码：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[a._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("42")]),a._v(" toString\nwarning"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" there was one feature warning"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" re"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("run "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("with")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("feature "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" details\nres3"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("42")]),a._v("\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("42.")]),a._v("hashCode\nres6"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("42")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("可以看到，Scala 的值类型之间的关系是扁平的。所有的值类都是 "),t("code",[a._v("scala.AnyVal")]),a._v(" 的子类型，但是它们不是互相的子类。代之以它们不同的值类类型之间可以隐式地互相转换。例如，需要的时候，类 "),t("code",[a._v("scala.Int")]),a._v(" 的实例可以自动放宽（通过隐式转换）到类 "),t("code",[a._v("scala.Long")]),a._v(" 的实例。隐式转换还用来为值类型添加更多的功能。例如，类型 "),t("code",[a._v("Int")]),a._v(" 支持以下所有的操作：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[a._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("42")]),a._v(" max "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("43")]),a._v("\nres0"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("43")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("42")]),a._v(" min "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("43")]),a._v("\nres1"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("42")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" until "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\nres2"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" scala"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("collection"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("immutable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Range "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Range"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" to "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\nres3"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" scala"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("collection"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("immutable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Range"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Inclusive "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Range"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.")]),a._v("abs\nres4"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("abs\nres5"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br")])]),t("p",[a._v("这里解释其工作原理：方法 "),t("code",[a._v("min")]),a._v("、"),t("code",[a._v("max")]),a._v("、"),t("code",[a._v("until")]),a._v("、"),t("code",[a._v("to")]),a._v(" 和 "),t("code",[a._v("abs")]),a._v(" 都定义在类 "),t("code",[a._v("scala.runtime.RichInt")]),a._v(" 里，并且有一个从类 Int 到 RichInt 的隐式转换。当你在 "),t("code",[a._v("Int")]),a._v(" 上调用没有定义在 "),t("code",[a._v("Int")]),a._v(" 上但定义在 "),t("code",[a._v("RichInt")]),a._v(" 上的方法时，这个转换就被应用了。")]),a._v(" "),t("p",[a._v("类 "),t("code",[a._v("Any")]),a._v(" 的另一个子类是类 "),t("code",[a._v("AnyRef")]),a._v("。这个是 Scala 里所有引用类的基类。正如前面提到的，在 Java 平台上 "),t("code",[a._v("AnyRef")]),a._v(" 实际就是类 "),t("code",[a._v("java.lang.Object")]),a._v(" 的别名。因此 Java 里写的类和 Scala 里写的都继承自 "),t("code",[a._v("AnyRef")]),a._v("。")]),a._v(" "),t("p",[a._v("如此说来，你可以认为 "),t("code",[a._v("java.lang.Object")]),a._v(" 是 Java 平台上实现 "),t("code",[a._v("AnyRef")]),a._v(" 的方式。因此，尽管你可以在 Java 平台上的 Scala 程序里交换使用 "),t("code",[a._v("Object")]),a._v(" 和 "),t("code",[a._v("AnyRef")]),a._v("，推荐的风格是在任何地方都只使用 "),t("code",[a._v("AnyRef")]),a._v("。")]),a._v(" "),t("p",[a._v("Scala 类与 Java 类不同在于它们还继承自一个名为 "),t("code",[a._v("ScalaObject")]),a._v(" 的特别的 "),t("code",[a._v("Marker Trait")]),a._v("。"),t("code",[a._v("Trait")]),a._v(" 我们在后面再进一步解释。")]),a._v(" "),t("h3",{attrs:{id:"所有类的公共子类-底层类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#所有类的公共子类-底层类型"}},[a._v("#")]),a._v(" 所有类的公共子类——底层类型")]),a._v(" "),t("p",[a._v("在本实验的上一小节中（Scala 的类层次关系），图的最下方我们可以看到有两个类，"),t("code",[a._v("scala.Null")]),a._v(" 和 "),t("code",[a._v("scala.Nothing")]),a._v("。这两个类的作用是：Scala 支持统一方式用来处理面向对象的一些边角情况。因为它们在类层次图的下方，也称为"),t("strong",[a._v("底层类型")]),a._v("。")]),a._v(" "),t("p",[a._v("类 "),t("code",[a._v("Null")]),a._v(" 代表 "),t("code",[a._v("null")]),a._v(" 引用，它是所有引用类（每个由 "),t("code",[a._v("AnyRef")]),a._v(" 派生的类）的子类。"),t("code",[a._v("Null")]),a._v(" 和值类型不兼容，也就是说，你不能把 "),t("code",[a._v("null")]),a._v(" 赋值给一个整数类型变量：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[a._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" error"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" an expression of "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" Null is ineligible "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implicit")]),a._v(" conversion\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[t("code",[a._v("Nothing")]),a._v(" 类型为图中类层次关系的最下方，它是所有其他类的子类。然而，这个类型没有任何实例（也就是没有任何值对应 "),t("code",[a._v("Nothing")]),a._v(" 类型）。前面提到，"),t("code",[a._v("Nothing")]),a._v(" 类型的一个用法是示意应用程序非正常终止，比如 "),t("code",[a._v("Predef")]),a._v(" 有一个 "),t("code",[a._v("error")]),a._v(" 方法：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" error"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("message"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Nothing")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" RuntimeException"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("message"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6318timestamp1525918059627-1654260356492116.png",alt:"11-3.2-1"}})]),a._v(" "),t("p",[t("code",[a._v("error")]),a._v(" 的返回类型就是 "),t("code",[a._v("Nothing")]),a._v("，告诉调用者该方法没有正常退出（抛出异常）。正因为 "),t("code",[a._v("Nothing")]),a._v(" 是所有其它类型的子类，你可以灵活使用如 "),t("code",[a._v("error")]),a._v(" 这样的函数。比如：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" divide"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("y"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("y "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("y\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" error"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Cannot divide by Zero"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6318timestamp1525918071345-1654260356492118.png",alt:"11-3.2-2"}})]),a._v(" "),t("p",[t("code",[a._v("if")]),a._v(" 的 “"),t("code",[a._v("then")]),a._v("” 分支的类型为 "),t("code",[a._v("Int(x/y)")]),a._v("，而 "),t("code",[a._v("else")]),a._v(" 分支的类型为 "),t("code",[a._v("error")]),a._v(" 返回值，其类型为 "),t("code",[a._v("Nothing")]),a._v("。因为 "),t("code",[a._v("Nothing")]),a._v(" 为所有类型的子类，它也是 "),t("code",[a._v("Int")]),a._v(" 的子类，因此 "),t("code",[a._v("divide")]),a._v(" 的类型为 "),t("code",[a._v("Int")]),a._v("。")])])}),[],!1,null,null,null);s.default=n.exports}}]);