(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{1431:function(t,a,r){"use strict";r.r(a);var s=r(24),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"什么是软件测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是软件测试"}},[t._v("#")]),t._v(" 什么是软件测试")]),t._v(" "),r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#单元测试"}},[t._v("单元测试")]),r("ul",[r("li",[r("a",{attrs:{href:"#什么是单元测试"}},[t._v("什么是单元测试")])]),r("li",[r("a",{attrs:{href:"#单元测试的优点"}},[t._v("单元测试的优点")])])])]),r("li",[r("a",{attrs:{href:"#junit-测试框架"}},[t._v("JUnit 测试框架")])]),r("li",[r("a",{attrs:{href:"#官方文档"}},[t._v("官方文档")])])])]),t._v("\n软件测试（英语：Software Testing），描述一种用来促进鉴定软件的正确性、完整性、安全性和质量的过程。换句话说，软件测试是一种实际输出与预期输出之间的审核或者比较过程。软件测试的经典定义是：在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。"),r("p"),t._v(" "),r("blockquote",[r("p",[t._v("以上内容来自百度百科。")])]),t._v(" "),r("h2",{attrs:{id:"单元测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[t._v("#")]),t._v(" 单元测试")]),t._v(" "),r("h3",{attrs:{id:"什么是单元测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是单元测试"}},[t._v("#")]),t._v(" 什么是单元测试")]),t._v(" "),r("p",[t._v("单元测试（英语：Unit Testing）又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。在过程化编程中，一个单元就是单个程序、函数、过程等；对于面向对象编程，最小单元就是方法，包括基类（超类）、抽象类、或者派生类（子类）中的方法。 通常来说，程序员每修改一次程序就会进行最少一次单元测试，在编写程序的过程中前后很可能要进行多次单元测试，以证实程序达到软件规格书要求的工作目标，没有程序错误；虽然单元测试不是什么必须的，但也不坏，这牵涉到项目管理的政策决定。")]),t._v(" "),r("h3",{attrs:{id:"单元测试的优点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单元测试的优点"}},[t._v("#")]),t._v(" 单元测试的优点")]),t._v(" "),r("ul",[r("li",[t._v("适应变更")])]),t._v(" "),r("p",[t._v("单元测试允许程序员在未来重构代码，并且确保模块依然工作正确（复合测试）。这个过程就是为所有函数和方法编写单元测试，一旦变更导致错误发生，借助于单元测试可以快速定位并修复错误。")]),t._v(" "),r("ul",[r("li",[t._v("简化集成")])]),t._v(" "),r("p",[t._v("单元测试消除程序单元的不可靠，采用自底向上的测试路径。通过先测试程序部件再测试部件组装，使集成测试变得更加简单。")]),t._v(" "),r("ul",[r("li",[t._v("文档记录")])]),t._v(" "),r("p",[t._v("单元测试提供了系统的一种文档记录。借助于查看单元测试提供的功能和单元测试中如何使用程序单元，开发人员可以直观的理解程序单元的基础 API。")]),t._v(" "),r("ul",[r("li",[t._v("表达设计")])]),t._v(" "),r("p",[t._v("在测试驱动开发的软件实践中，单元测试可以取代正式的设计。每一个单元测试案例均可以视为一项类、方法和待观察行为等设计元素。")]),t._v(" "),r("h2",{attrs:{id:"junit-测试框架"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#junit-测试框架"}},[t._v("#")]),t._v(" JUnit 测试框架")]),t._v(" "),r("p",[t._v("JUnit 是一个开源的 Java 编程语言的单元测试框架。通过 JUnit，可以提高测试代码编写的速度与质量，而且 JUnit 测试可以自动运行，检查自身结果并提供即时反馈，无需人工整理测试结果。JUnit 凭借它的优势，在 Java 单元测试中得到广泛使用。")]),t._v(" "),r("p",[t._v("JUnit 集成在许多 IDE 当中，如 Eclipse。目前 JUnit 最新版本为 JUnit5，因此本课程使用 Eclipse 中的 JUnit5 作为主要的实战环境。")]),t._v(" "),r("h2",{attrs:{id:"官方文档"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#官方文档"}},[t._v("#")]),t._v(" 官方文档")]),t._v(" "),r("h4",{attrs:{id:"参考链接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://junit.org/junit5/docs/current/user-guide/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JUnit5 官方文档"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);