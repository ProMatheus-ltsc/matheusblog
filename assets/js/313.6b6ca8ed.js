(window.webpackJsonp=window.webpackJsonp||[]).push([[313],{1661:function(s,t,a){"use strict";a.r(t);var n=a(24),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("#Trait\n")]),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#实验介绍"}},[s._v("实验介绍")])]),a("li",[a("a",{attrs:{href:"#开发准备"}},[s._v("开发准备")])]),a("li",[a("a",{attrs:{href:"#实验步骤"}},[s._v("实验步骤")]),a("ul",[a("li",[a("a",{attrs:{href:"#trait-的基本用法"}},[s._v("Trait 的基本用法")])]),a("li",[a("a",{attrs:{href:"#选择痩接口还是胖接口设计"}},[s._v("选择痩接口还是胖接口设计")])]),a("li",[a("a",{attrs:{href:"#trait-示例-rectangular-对象"}},[s._v("Trait 示例 —— Rectangular 对象")])]),a("li",[a("a",{attrs:{href:"#ordered-trait"}},[s._v("Ordered Trait")])]),a("li",[a("a",{attrs:{href:"#用-trait-来实现可叠加的修改操作"}},[s._v("用 Trait 来实现可叠加的修改操作")])])])])])]),a("p"),s._v(" "),a("h2",{attrs:{id:"实验介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实验介绍"}},[s._v("#")]),s._v(" 实验介绍")]),s._v(" "),a("h4",{attrs:{id:"实验内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实验内容"}},[s._v("#")]),s._v(" 实验内容")]),s._v(" "),a("p",[s._v("在 Scala 中，Trait 为重用代码的一个基本单位。这是 Scala 非常有特色的一点，本节我们来了解一下什么是 Trait，以及如何使用它。")]),s._v(" "),a("h4",{attrs:{id:"实验知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实验知识点"}},[s._v("#")]),s._v(" 实验知识点")]),s._v(" "),a("ul",[a("li",[s._v("Trait 的基本概念")]),s._v(" "),a("li",[s._v("Trait 的基本用法")]),s._v(" "),a("li",[s._v("痩接口和胖接口设计")]),s._v(" "),a("li",[s._v("Ordered Trait")]),s._v(" "),a("li",[s._v("实现可叠加的修改操作")])]),s._v(" "),a("h4",{attrs:{id:"实验环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实验环境"}},[s._v("#")]),s._v(" 实验环境")]),s._v(" "),a("ul",[a("li",[s._v("Scala")]),s._v(" "),a("li",[s._v("Xfce 终端")])]),s._v(" "),a("h4",{attrs:{id:"适合人群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适合人群"}},[s._v("#")]),s._v(" 适合人群")]),s._v(" "),a("p",[s._v("本课程难度为一般，属于初级级别课程，适合零基础或具有 Java 编程基础的用户。")]),s._v(" "),a("h2",{attrs:{id:"开发准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发准备"}},[s._v("#")]),s._v(" 开发准备")]),s._v(" "),a("h4",{attrs:{id:"trait-的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trait-的基本概念"}},[s._v("#")]),s._v(" Trait 的基本概念")]),s._v(" "),a("p",[s._v("在 Scala 中，"),a("code",[s._v("Trait")]),s._v(" 为重用代码的一个基本单位。一个 "),a("code",[s._v("Traits")]),s._v(" 封装了方法和变量。和 "),a("code",[s._v("Interface")]),s._v(" 相比，它的方法可以有实现。这一点和抽象类定义类似。但和类继承不同的是，Scala 中类继承为单一继承，也就是说子类只能有一个父类。")]),s._v(" "),a("p",[s._v("当一个类可以和多个 "),a("code",[s._v("Trait")]),s._v(" 混合，这些 "),a("code",[s._v("Trait")]),s._v(" 定义的成员变量和方法也就变成了该类的成员变量和方法。由此可以看出，"),a("code",[s._v("Trait")]),s._v(" 集合了 "),a("code",[s._v("Interface")]),s._v(" 和抽象类的优点，同时又没有破坏单一继承的原则。")]),s._v(" "),a("p",[s._v("为了使用交互式 Scala 解释器，你可以在打开的终端中输入命令：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("su")]),s._v(" -l hadoop "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#密码为 hadoop")]),s._v("\nscala\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("当出现 "),a("code",[s._v("scala>")]),s._v(" 开始的命令行提示符时，就说明你已经成功进入解释器了。如下图所示。")]),s._v(" "),a("blockquote",[a("p",[s._v("注意：由于在线实验环境的限制，在 Spark shell 中运行代码会稍微慢一点.")])]),s._v(" "),a("p",[a("img",{attrs:{src:"document-uid702660labid6307timestamp1525416596329-1654260426449120.png",alt:"1-2.1-1"}})]),s._v(" "),a("h2",{attrs:{id:"实验步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实验步骤"}},[s._v("#")]),s._v(" 实验步骤")]),s._v(" "),a("h3",{attrs:{id:"trait-的基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trait-的基本用法"}},[s._v("#")]),s._v(" Trait 的基本用法")]),s._v(" "),a("p",[s._v("下面我们来看看 "),a("code",[s._v("Trait")]),s._v(" 的基本用法：")]),s._v(" "),a("p",[s._v("定义一个 "),a("code",[s._v("Trait")]),s._v(" 的方法和定义一个类的方法非常类似，除了它使用 "),a("code",[s._v("trait")]),s._v(" 而非 "),a("code",[s._v("class")]),s._v(" 关键字来定义一个 "),a("code",[s._v("trait")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("trait")]),s._v(" Philosophical"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" philosophize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    println"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I consume memeory, therefor I am!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("img",{attrs:{src:"document-uid702660labid6319timestamp1525918955097.png",alt:"12-4.1-1"}})]),s._v(" "),a("p",[s._v("这个 "),a("code",[s._v("Trait")]),s._v(" 名为 "),a("code",[s._v("Philosophical")]),s._v("。它没有声明基类，因此和类一样，有个缺省的基类 "),a("code",[s._v("AnyRef")]),s._v("。它定义了一个方法，叫做 "),a("code",[s._v("philosophize")]),s._v("。这是个简单的 "),a("code",[s._v("Trait")]),s._v("，仅够说明 "),a("code",[s._v("Trait")]),s._v(" 如何工作。")]),s._v(" "),a("p",[s._v("一旦定义好 "),a("code",[s._v("Trait")]),s._v("，它就可以用来和一个类混合。这可以使用 "),a("code",[s._v("extends")]),s._v(" 或 "),a("code",[s._v("with")]),s._v(" 来混合一个 "),a("code",[s._v("trait")]),s._v("。例如：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Frog "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Philosophical"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" toString"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"gree"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("img",{attrs:{src:"document-uid702660labid6319timestamp1525918971920.png",alt:"12-4.1-2"}})]),s._v(" "),a("p",[s._v("这里我们使用 "),a("code",[s._v("extends")]),s._v(" 为 "),a("code",[s._v("Frog")]),s._v(" 添加名为 "),a("code",[s._v("Philosophical")]),s._v(" 的 "),a("code",[s._v("Trait")]),s._v(" 属性。因此，"),a("code",[s._v("Frog")]),s._v(" 默认继承自 "),a("code",[s._v("Philosophical")]),s._v(" 的父类 "),a("code",[s._v("AnyRef")]),s._v("。这样，"),a("code",[s._v("Frog")]),s._v(" 类也具有了 "),a("code",[s._v("Philosophical")]),s._v(" 的性质。因此 "),a("code",[s._v("Trait")]),s._v(" 也可以翻译成"),a("code",[s._v("特质")]),s._v("，但后面我们还是继续使用 "),a("code",[s._v("Trait")]),s._v(" 原文。")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[s._v("scala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" frog "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" Frog\nfrog"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Frog "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" green\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" frog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("philosophize\nI consume memeory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" therefor I am"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("可以看到，"),a("code",[s._v("Frog")]),s._v(" 添加了 "),a("code",[s._v("Philosophical")]),s._v("（哲学性），也具有了哲学家的特性，可以说出类似“我思故我在”的话语了。和 "),a("code",[s._v("Interface")]),s._v(" 一样，"),a("code",[s._v("Trait")]),s._v(" 也定义一个类型。比如：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[s._v("scala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" phil"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Philosophical "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" frog\nphil"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Philosophical "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" green\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" phil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("philosophize\nI consume memeory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" therefor I am"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("变量 "),a("code",[s._v("phil")]),s._v(" 的类型为 "),a("code",[s._v("Philosophical")]),s._v("。")]),s._v(" "),a("p",[s._v("如果你需要把某个 "),a("code",[s._v("Trait")]),s._v(" 添加到一个有基类的子类中，那么就要使用 "),a("code",[s._v("extends")]),s._v(" 继承基类，并且通过 "),a("code",[s._v("with")]),s._v(" 添加 "),a("code",[s._v("Trait")]),s._v("。比如：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Animal\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Frog "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Animal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Philosophical"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" toString "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"green"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("img",{attrs:{src:"document-uid702660labid6319timestamp1525918992236.png",alt:"12-4.1-3"}})]),s._v(" "),a("p",[s._v("还是和 "),a("code",[s._v("Interface")]),s._v(" 类似，你可以为某个类添加多个 "),a("code",[s._v("Trait")]),s._v(" 属性。此时，使用多个 with 即可，比如：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Animal\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("trait")]),s._v(" HasLegs\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Frog "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Animal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Philosophical "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" HasLegs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" toString "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"green"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("img",{attrs:{src:"document-uid702660labid6319timestamp1525919490977.png",alt:"12-4.1-4"}})]),s._v(" "),a("p",[s._v("目前为止，你看到的例子中，类 "),a("code",[s._v("Frog")]),s._v(" 都继承了 "),a("code",[s._v("Philosophical")]),s._v(" 的 "),a("code",[s._v("philosophize")]),s._v(" 实现。此外，"),a("code",[s._v("Frog")]),s._v(" 也可以重载 "),a("code",[s._v("philosophize")]),s._v(" 方法。语法与重载基类中定义的方法一样。")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Animal\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("trait")]),s._v(" HasLegs\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Frog "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Animal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Philosophical "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" HasLegs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" toString "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"green"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" philosophize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    println"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"It ain\'t easy being "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" toString "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("img",{attrs:{src:"document-uid702660labid6319timestamp1525919531646.png",alt:"12-4.1-5"}})]),s._v(" "),a("p",[s._v("因为 "),a("code",[s._v("Frog")]),s._v(" 的这个新定义仍然混入了特质 "),a("code",[s._v("Philosophize")]),s._v("，你仍然可以把它当作这种类型的变量使用。但是，由于 "),a("code",[s._v("Frog")]),s._v(" 重载了 "),a("code",[s._v("Philosophical")]),s._v(" 的 "),a("code",[s._v("philosophize")]),s._v(" 实现，当你调用它的时候，你会得到新的回应：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[s._v("scala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" phrog"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Philosophical "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" Frog\nphrog"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Philosophical "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" green\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" phrog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("philosophize\nIt ain"),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v("'t")]),s._v(" easy being green"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这时你或许可以推导出以下结论："),a("code",[s._v("Trait")]),s._v(" 就像是带有具体方法的 Java 接口。不过，它能做的更多。比方说，"),a("code",[s._v("Trait")]),s._v(" 可以声明字段和维持状态值。实际上，你可以用 "),a("code",[s._v("Trait")]),s._v(" 定义做任何用类定义做的事，并且语法也是一样的。但有两点是例外的：第一点是 "),a("code",[s._v("Trait")]),s._v(" 不能有任何“类”参数；第二点是不能传递给类的主构造器的参数。另一方面，你可以定义如下的类：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Point"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("但下面的 "),a("code",[s._v("Trait")]),s._v(" 定义会直接报错：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[s._v("scala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("trait")]),s._v(" NoPoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" error"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" traits or objects may not have parameters\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("trait")]),s._v(" NoPoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"选择痩接口还是胖接口设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择痩接口还是胖接口设计"}},[s._v("#")]),s._v(" 选择痩接口还是胖接口设计")]),s._v(" "),a("p",[a("code",[s._v("Trait")]),s._v(" 的一种主要应用方式是可以根据类已有的方法自动为类添加方法。换言之，"),a("code",[s._v("Trait")]),s._v(" 可以使得一个瘦接口变得丰满些，把它变成胖接口。")]),s._v(" "),a("p",[s._v("选择瘦接口还是胖接口，体现了面向对象设计中常会面临的一个问题——在实现者与接口用户之间的权衡。")]),s._v(" "),a("p",[s._v("胖接口有更多的方法，对于调用者来说更便捷。客户可以使用一个完全符合他们功能需要的方法。另一方面，瘦接口有较少的方法，对于实现者来说更简单。")]),s._v(" "),a("p",[s._v("然而，调用瘦接口的客户因此要写更多的代码。由于没有更多可选的方法调用，他们或许不得不选一个不太完美匹配他们所需的方法并为了使用它写一些额外的代码。")]),s._v(" "),a("p",[s._v("Java 的接口常常是过瘦而非过胖。例如，从 Java 1.4 开始引入的 "),a("code",[s._v("CharSequence")]),s._v(" 接口，是对于字串类型的类来说通用的瘦接口，它持有一个字符序列。下面是把它看作 Scala 中 "),a("code",[s._v("Trait")]),s._v(" 的定义：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("trait")]),s._v(" CharSequence "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" charAt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Char")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" length"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" subSequence"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("start"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" end"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" CharSequence\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("img",{attrs:{src:"document-uid702660labid6319timestamp1525919938204.png",alt:"12-4.2-1"}})]),s._v(" "),a("p",[s._v("尽管在类 "),a("code",[s._v("String")]),s._v(" 的大量方法中，有大多数都可以用在任何 "),a("code",[s._v("CharSequence上")]),s._v("，然而 Java 的 "),a("code",[s._v("CharSequence")]),s._v(" 接口定义仅提供了 4 个方法。如果 "),a("code",[s._v("CharSequence")]),s._v(" 包含全部 "),a("code",[s._v("String")]),s._v(" 接口，那它将为 "),a("code",[s._v("CharSequence")]),s._v(" 的实现者压上沉重的负担。为了任何一个 Java 里的 "),a("code",[s._v("CharSequence")]),s._v(" 接口的实现，程序员将不得不定义一大堆方法。因为 Scala 的 "),a("code",[s._v("Trait")]),s._v(" 可以包含具体方法，这使得创建胖接口变得非常便捷。")]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("Trait")]),s._v(" 中，添加具体方法使得胖瘦对阵的权衡大大倾向于胖接口。不像在 Java 里那样，在 Scala 中添加具体方法是一次性的劳动。你只要在 "),a("code",[s._v("Trait")]),s._v(" 中实现方法一次，而不再需要在每个混入 "),a("code",[s._v("Trait")]),s._v(" 的方法中重新实现它。因此，与没有 "),a("code",[s._v("Trait")]),s._v(" 的语言相比，Scala 里的胖接口没什么工作要做。")]),s._v(" "),a("p",[s._v("要使用 "),a("code",[s._v("Trait")]),s._v(" 加强接口，只要简单地定义一个具有少量抽象方法的 "),a("code",[s._v("Trait")]),s._v("，即 "),a("code",[s._v("Trait")]),s._v(" 接口的瘦部分和大量的、潜在的具体方法，并且所有的都实现在抽象方法之上。然后，你就可以把丰满了的 "),a("code",[s._v("Trait")]),s._v(" 混入到类中，实现接口的瘦部分，并最终获得具有全部胖接口内容的类。")]),s._v(" "),a("h3",{attrs:{id:"trait-示例-rectangular-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trait-示例-rectangular-对象"}},[s._v("#")]),s._v(" Trait 示例 —— Rectangular 对象")]),s._v(" "),a("p",[s._v("在设计绘图程序库时，常常需要定义一些具有矩形形状的类型：比如窗口、bitmap 图像、矩形选取框等。为了方便使用这些矩形对象，函数库对象类提供了查询对象宽度和长度的方法（比如 "),a("code",[s._v("width")]),s._v("，"),a("code",[s._v("height")]),s._v(" )和坐标的 "),a("code",[s._v("left")]),s._v("、"),a("code",[s._v("right")]),s._v("、"),a("code",[s._v("top")]),s._v(" 和 "),a("code",[s._v("bottom")]),s._v(" 等方法。")]),s._v(" "),a("p",[s._v("然而，在实现这些函数库的这种方法时，如果使用 Java 来实现，就需要重复大量代码，工作量比较大（这些类之间不一定可以定义继承关系）。但如果使用 Scala 来实现这个图形库，则可以使用 "),a("code",[s._v("Trait")]),s._v("，从而为这些类方便地添加和矩形相关的方法。")]),s._v(" "),a("p",[s._v("首先我们先看看，如何不使用 "),a("code",[s._v("Trait")]),s._v(" 来实现这些类。首先我们定义一些基本的几何图形类，比如 "),a("code",[s._v("Point")]),s._v(" 和 "),a("code",[s._v("Rectangle")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Point"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Rectangle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" topLeft"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Point"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" bottomRight"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Point"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" topLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" right "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" bottomRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" width "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" right"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("left\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// and many more geometric methods")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("img",{attrs:{src:"document-uid702660labid6319timestamp1525920812708-1654260472716134.png",alt:"12-4.3-1"}})]),s._v(" "),a("p",[s._v("这里我们定义了一个点和矩形类。"),a("code",[s._v("Rectangle")]),s._v(" 类的主构造函数使用了左上角和右下角坐标，然后定义了 "),a("code",[s._v("left")]),s._v("、"),a("code",[s._v("right")]),s._v(" 和 "),a("code",[s._v("width")]),s._v(" 等一些常用的矩形相关的方法。")]),s._v(" "),a("p",[s._v("同时，在函数库中，我们还可以定义一下 UI 组件（它并不是使用 "),a("code",[s._v("Retangle")]),s._v(" 作为基类），其可能的定义如下：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Component "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" topLeft "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Point\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" bottomRight"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Point\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" topLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" right "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" bottomRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" width "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" right"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("left\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// and many more geometric methods")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("img",{attrs:{src:"document-uid702660labid6319timestamp1525920830868-1654260472716136.png",alt:"12-4.3-2"}})]),s._v(" "),a("p",[s._v("可以看到，"),a("code",[s._v("left")]),s._v("、"),a("code",[s._v("right")]),s._v("、"),a("code",[s._v("width")]),s._v(" 的定义和 "),a("code",[s._v("Rectangle")]),s._v(" 的定义重复了。可能函数库还会定义其它一些类，也可能重复这些定义。")]),s._v(" "),a("p",[s._v("如果我们使用 "),a("code",[s._v("Trait")]),s._v("，就可以消除这些重复代码。比如我们可以定义如下的 "),a("code",[s._v("Rectangular Trait")]),s._v(" 类型：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("trait")]),s._v(" Rectangular "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" topLeft"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Point\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" bottomRight"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Point\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" topLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" right "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" bottomRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" width "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" right"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("left\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// and many more geometric methods")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("img",{attrs:{src:"document-uid702660labid6319timestamp1525920851601-1654260472716138.png",alt:"12-4.3-3"}})]),s._v(" "),a("p",[s._v("然后我们修改 "),a("code",[s._v("Component")]),s._v(" 类的定义，使其“融入” "),a("code",[s._v("Rectangular")]),s._v(" 特性：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Component "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Rectangular"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// other methods")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("img",{attrs:{src:"document-uid702660labid6319timestamp1525920871615-1654260472716140.png",alt:"12-4.3-4"}})]),s._v(" "),a("p",[s._v("同样我们也修改一下 "),a("code",[s._v("Rectangle")]),s._v(" 定义：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Rectangle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" topLeft"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Point"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" bottomRight"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Point"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Rectangular"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// other methods")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("img",{attrs:{src:"document-uid702660labid6319timestamp1525920890337-1654260472716142.png",alt:"12-4.3-5"}})]),s._v(" "),a("p",[s._v("这样，我们就能将矩形相关的一些属性和方法抽象出来，定义在 Trait 中。凡是“混合”了这个 "),a("code",[s._v("Rectangluar")]),s._v(" 特性的类，都自动包含了这些方法：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" rect "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" Rectangle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" Point"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" Point"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nprintln "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("rect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nprintln"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("rect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nprintln"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("rect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("运行结果如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"document-uid702660labid6319timestamp1525920922763-1654260472716144.png",alt:"12-4.3-6"}})]),s._v(" "),a("h3",{attrs:{id:"ordered-trait"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ordered-trait"}},[s._v("#")]),s._v(" Ordered Trait")]),s._v(" "),a("p",[s._v("比较对象也是胖接口的一个较广泛的应用领域。当你需要比较两个有顺序关系的对象时，如果只需要一个方法就能知道需要比较的结果，就非常便利。比如，你需要“小于”关系，你希望使用 “"),a("code",[s._v("<")]),s._v("” 比较就可以了；如果是“小于等于”，使用 “"),a("code",[s._v("<=")]),s._v("” 就可以。")]),s._v(" "),a("p",[s._v("如果使用瘦接口来定义类，也许你只定义了一个 "),a("code",[s._v("<")]),s._v(" 比较方法。在需要小于等于时，你可能需要使用 "),a("code",[s._v("(x<y)|| (x==y)")]),s._v("。一个胖接口定义了所有可能的比较运算符，使得你可以直接使用 "),a("code",[s._v("<=")]),s._v(" 来书写代码。")]),s._v(" "),a("p",[s._v("但胖接口带来的便利也是有代价的，可以回头看看我们前面定义的 "),a("code",[s._v("Rational")]),s._v(" 类（在本课程的《类和对象（二）》一节中有提到）。")]),s._v(" "),a("p",[s._v("如果我们需要定义比较操作，则需要定义如下代码：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Rational"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" d"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("that"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Rational"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("numer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("denom "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("numer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("denom\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("that"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Rational"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" that "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("that"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Rational"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("that"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Rational"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("这个类定义了四个比较运算符 "),a("code",[s._v("<")]),s._v("、"),a("code",[s._v(">")]),s._v("、"),a("code",[s._v("<=")]),s._v(" 和 "),a("code",[s._v(">=")]),s._v("。首先我们注意到，后面的三个比较运算符，都是通过第一个比较运算符来实现的。其次，我们也可以看到，后面三个比较操作对于任意对象都是适用的，而与对象的类型无关。而需要实现这四个比较运算的胖接口都要重复这些代码。")]),s._v(" "),a("p",[s._v("Scala 对于比较这种常见的操作，提供了 "),a("code",[s._v("Ordered Trait")]),s._v(" 定义。使用它可以把所有的比较运算的代码通过一个 "),a("code",[s._v("compare")]),s._v(" 定义来替代。这个 "),a("code",[s._v("ordered trait")]),s._v(" 可以让需要实现比较运算的类，通过和它“融合”。这一切只需实现一个 "),a("code",[s._v("compare")]),s._v(" 方法即可。")]),s._v(" "),a("p",[s._v("因此，我们可以修改前面的实现如下：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Rational "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" d"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Ordered"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Rational"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" compare "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("that"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Rational"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("numer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("denom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("numer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("denom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("要注意两点：一是 "),a("code",[s._v("Ordered")]),s._v(" 需要指明类型参数 "),a("code",[s._v("Ordered[T]")]),s._v("。类型参数我们将在后面介绍，这里只需要知道添加所需比较类型的类名称（本例为 "),a("code",[s._v("Rational")]),s._v("）。此外，需要使用 "),a("code",[s._v("compare")]),s._v(" 方法。它比较有序对象，若 "),a("code",[s._v("=0")]),s._v("，则表示两个对象相同；若 "),a("code",[s._v(">0")]),s._v("，则表示前面大于后面对象；当然如果是 "),a("code",[s._v("<0")]),s._v("，则表示前面的对象小于后面的对象。")]),s._v(" "),a("p",[s._v("下面为完整代码以及测试结果：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Rational "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" d"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Ordered"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Rational"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    require"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("d "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" g "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" gcd "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("abs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("abs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" numer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("g\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" denom "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" d"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("g\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" toString "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" numer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("denom\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("that"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Rational"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" Rational"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n          numer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("denom "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("numer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" denom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n          denom "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("denom\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("that"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Rational"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" Rational"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" numer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("numer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" denom "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("denom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" gcd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" gcd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" compare "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("that"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Rational"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("numer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("denom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("numer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("that"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("denom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" half "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" Rational"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nhalf"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Rational "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" third "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" Rational"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nthird"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Rational "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" half "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" third\nres0"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" half "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" third\nres1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("p",[s._v("因此，你在需要实现比较对象时，首先要考虑 "),a("code",[s._v("Ordered Trait")]),s._v("。看看这个 "),a("code",[s._v("Trait")]),s._v(" 能否满足要求，然后通过和这个 "),a("code",[s._v("Trait")]),s._v(" “混合”，就可以很方便的实现对象之间的比较。")]),s._v(" "),a("p",[s._v("此外要注意，"),a("code",[s._v("Ordered Trait")]),s._v(" 没有定义 "),a("code",[s._v("equal")]),s._v(" 方法。因为如果需要定义 "),a("code",[s._v("equal")]),s._v(" 方法，那么需要检查传入参数的类型，Ordered Trait 无法实现。因此，如果你需要 "),a("code",[s._v("==")]),s._v(" 比较运算符，需要另外定义。")]),s._v(" "),a("h3",{attrs:{id:"用-trait-来实现可叠加的修改操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-trait-来实现可叠加的修改操作"}},[s._v("#")]),s._v(" 用 Trait 来实现可叠加的修改操作")]),s._v(" "),a("p",[s._v("我们已经看到 "),a("code",[s._v("Trait")]),s._v(" 的一个主要用法是将一个瘦接口变成胖接口。本节我们介绍 "),a("code",[s._v("Trait")]),s._v(" 的另外一个重要用法：为类添加一些可以叠加的修改操作。")]),s._v(" "),a("p",[a("code",[s._v("Trait")]),s._v(" 能够修改类的方法，并且能够通过叠加这些操作（不同组合）修改类的方法。")]),s._v(" "),a("p",[s._v("我们来看这样一个例子：修改一个整数队列，这个队列有两个方法："),a("code",[s._v("put")]),s._v(" 为队列添加一个元素，"),a("code",[s._v("get")]),s._v(" 从队列读取一个元素。队列是先进先出，因此 "),a("code",[s._v("get")]),s._v(" 读取的顺序和 "),a("code",[s._v("put")]),s._v("的顺序是一致的。")]),s._v(" "),a("p",[s._v("对于上面的队列，我们定义如下三个 "),a("code",[s._v("Trait")]),s._v(" 类型：")]),s._v(" "),a("ul",[a("li",[s._v("Doubling：队列中所有元素 X 2。")]),s._v(" "),a("li",[s._v("Incrementing：队列中所有元素递增。")]),s._v(" "),a("li",[s._v("Filtering： 过滤到队列中所有负数。")])]),s._v(" "),a("p",[s._v("这三个 "),a("code",[s._v("Trait")]),s._v(" 代表了修改操作，因为它们可以用来修改队列类对象，而不是为队列类定义所有可能的操作。这三个操作是可以叠加的，也就是说，你可以通过这三个基本操作的任意不同组合和原始的队列类“混合”，从而得到你所需要的新的队列类的修改操作。")]),s._v(" "),a("p",[s._v("为了实现这个整数队列，我们可以定义这个整数队列的一个基本实现如下：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("scala"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("collection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mutable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("ArrayBuffer\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" IntQueue "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" put"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" BasicIntQueue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" IntQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" buf "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" ArrayBuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("remove"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" put"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" buf "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[a("img",{attrs:{src:"document-uid702660labid6319timestamp1525921912710.png",alt:"12-4.5-1"}})]),s._v(" "),a("p",[s._v("下面我们可以使用这个实现，来完成队列的一些基本操作：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[s._v("scala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" queue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" BasicIntQueue\nqueue"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" BasicIntQueue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" BasicIntQueue"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@60d134d3")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("put "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("put"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nres2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nres3"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("这个实现完成了对象的基本操作，看起来还可以。但是，如果此时有新的需求，希望在添加元素时，添加元素的双倍，并且过滤掉负数，你可以直接修改 "),a("code",[s._v("put")]),s._v(" 方法来完成。但之后需求又变了，添加元素时，添加的为参数的递增值，你又可能要修改 "),a("code",[s._v("put")]),s._v(" 方法。此时就显得队列的实现不够灵活。")]),s._v(" "),a("p",[s._v("我们来看看如果使用 "),a("code",[s._v("Trait")]),s._v(" 会有什么结果，我们实现 "),a("code",[s._v("Doubling")]),s._v("、"),a("code",[s._v("Incrementing")]),s._v(" 和 "),a("code",[s._v("Filtering")]),s._v(" 如下：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("trait")]),s._v(" Doubling "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" IntQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" put"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("put"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("trait")]),s._v(" Incrementing "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" IntQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" put"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("put"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("trait")]),s._v(" Filtering "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" IntQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" put "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("put"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[a("img",{attrs:{src:"document-uid702660labid6319timestamp1525921936142.png",alt:"12-4.5-2"}})]),s._v(" "),a("p",[s._v("我们可以看到：所有的 "),a("code",[s._v("Trait")]),s._v(" 实现都以 "),a("code",[s._v("IntQueue")]),s._v(" 为基类，这保证这些 "),a("code",[s._v("Trait")]),s._v(" 只能和同样继承了 "),a("code",[s._v("IntQueue")]),s._v(" 的类“混合”。比如和 "),a("code",[s._v("BasicIntQueue")]),s._v(" 混合，而不可以和前面定义的 "),a("code",[s._v("Rational")]),s._v(" 类混合。")]),s._v(" "),a("p",[s._v("此外，"),a("code",[s._v("Trait")]),s._v(" 的 "),a("code",[s._v("put")]),s._v(" 方法中使用了 "),a("code",[s._v("super")]),s._v("。通常情况下，对于普通的类，这种调用是不合法的。但对于 "),a("code",[s._v("trait")]),s._v(" 来说，这种方法是可行的，这是因为 "),a("code",[s._v("trait")]),s._v(" 中的 "),a("code",[s._v("super")]),s._v(" 调用是动态绑定的。只要和这个 "),a("code",[s._v("Trait")]),s._v(" 混合在其他类或 "),a("code",[s._v("Trait")]),s._v(" 之后，而这个其它类或 "),a("code",[s._v("Trait")]),s._v(" 定义了 "),a("code",[s._v("super")]),s._v(" 调用的方法即可。若要实现可以叠加的修改操作，这种方法是必须的。并且，要注意使用 "),a("code",[s._v("abstract override")]),s._v(" 修饰符，这种使用方法仅限于 "),a("code",[s._v("Trait")]),s._v(" 而不能用作 "),a("code",[s._v("Class")]),s._v(" 的定义上。")]),s._v(" "),a("p",[s._v("有了这三个 "),a("code",[s._v("Trait")]),s._v(" 的定义，我们就可以非常灵活的组合这些 "),a("code",[s._v("Trait")]),s._v(" 来修改 "),a("code",[s._v("BasicIntQueue")]),s._v(" 的操作。")]),s._v(" "),a("p",[s._v("首先我们使用 "),a("code",[s._v("Doubling Trait")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[s._v("scala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" queue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" BasicIntQueue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Doubling\nqueue"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" BasicIntQueue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Doubling "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" $anon$"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@3b004676")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("put"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nres1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("这里通过 "),a("code",[s._v("BasicIntQueue")]),s._v(" 和 "),a("code",[s._v("Doubling")]),s._v(" 混合，我们构成了一个新的队列类型，每次添加的都是参数的倍增。")]),s._v(" "),a("p",[s._v("我们在使用 "),a("code",[s._v("BasicIntQueue")]),s._v(" 的同时，与 "),a("code",[s._v("Doubling")]),s._v(" 和 "),a("code",[s._v("Increment")]),s._v(" 混合。注意，我们构造了两个不同的整数队列，不同是 "),a("code",[s._v("Doubling")]),s._v(" 和 "),a("code",[s._v("Increment")]),s._v(" 的混合的顺序。")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[s._v("scala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" queue1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" BasicIntQueue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Doubling "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Incrementing\nqueue1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" BasicIntQueue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Doubling "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Incrementing "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" $anon$"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@35849932")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" queue2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" BasicIntQueue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Incrementing  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Doubling\nqueue2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" BasicIntQueue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Incrementing "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Doubling "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" $anon$"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@4a4cdea2")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("put"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nres4"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("put"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nres6"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("可以看到，结果和 "),a("code",[s._v("Trait")]),s._v(" 混合的顺序有关。简单地说，越在后面混合的 "),a("code",[s._v("Trait")]),s._v(" 作用越大。因此 "),a("code",[s._v("queue1")]),s._v(" 先 "),a("code",[s._v("+1")]),s._v("，然后 "),a("code",[s._v("x2")]),s._v("，而 "),a("code",[s._v("queue2")]),s._v(" 先 "),a("code",[s._v("x2")]),s._v(" 后 "),a("code",[s._v("+1")]),s._v("。")]),s._v(" "),a("p",[s._v("最后我们看看三个 "),a("code",[s._v("Trait")]),s._v(" 混合的例子：")]),s._v(" "),a("div",{staticClass:"language-scala line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[s._v("scala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" queue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" BasicIntQueue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Doubling "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Incrementing "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Filtering\nqueue"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" BasicIntQueue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Doubling "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Incrementing "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Filtering "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" $anon$"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@73a4eb2d")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("put"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("put"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("put"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nres10"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nres11"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n\nscala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\njava"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("IndexOutOfBoundsException"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n        at scala"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("collection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mutable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ResizableArray$"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("apply"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ResizableArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("scala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at scala"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("collection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mutable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ArrayBuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("apply"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ArrayBuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("scala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at scala"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("collection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mutable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ArrayBuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("remove"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ArrayBuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("scala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("163")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at BasicIntQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("clinit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("clinit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at $print"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at sun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("NativeMethodAccessorImpl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("invoke0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Native Method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at sun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("NativeMethodAccessorImpl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("invoke"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("NativeMethodAccessorImpl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("57")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at sun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("DelegatingMethodAccessorImpl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("invoke"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("DelegatingMethodAccessorImpl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("invoke"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("606")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at scala"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tools"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("nsc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("interpreter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("IMain$ReadEvalPrint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("call"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("IMain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("scala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("704")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at scala"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tools"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("nsc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("interpreter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("IMain$Request$$anonfun$"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14.")]),s._v("apply"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("IMain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("scala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("920")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at scala"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tools"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("nsc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("interpreter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Line$$anonfun$"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("apply$mcV$sp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Line"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("scala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at scala"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tools"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("nsc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v("$$anon$"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("scala"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("744")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("p",[s._v("最后的异常是因为队列为空（过滤掉了负数），我们没有添加错误处理，元素 "),a("code",[s._v("-4")]),s._v(" 没有被添加到了队列中。")])])}),[],!1,null,null,null);t.default=e.exports}}]);