(window.webpackJsonp=window.webpackJsonp||[]).push([[306],{1654:function(a,s,t){"use strict";t.r(s);var n=t(24),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"类和对象-二"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类和对象-二"}},[a._v("#")]),a._v(" 类和对象(二)")]),a._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#实验介绍"}},[a._v("实验介绍")])]),t("li",[t("a",{attrs:{href:"#开发准备"}},[a._v("开发准备")])]),t("li",[t("a",{attrs:{href:"#实验步骤-有理数类的表示"}},[a._v("实验步骤（有理数类的表示）")]),t("ul",[t("li",[t("a",{attrs:{href:"#rational-类的定义规范"}},[a._v("Rational 类的定义规范")])]),t("li",[t("a",{attrs:{href:"#定义-rational"}},[a._v("定义 Rational")])]),t("li",[t("a",{attrs:{href:"#重新定义类的-tostring-方法"}},[a._v("重新定义类的 toString 方法")])]),t("li",[t("a",{attrs:{href:"#前提条件检查"}},[a._v("前提条件检查")])]),t("li",[t("a",{attrs:{href:"#添加成员变量"}},[a._v("添加成员变量")])]),t("li",[t("a",{attrs:{href:"#自身引用"}},[a._v("自身引用")])]),t("li",[t("a",{attrs:{href:"#辅助构造函数"}},[a._v("辅助构造函数")])]),t("li",[t("a",{attrs:{href:"#私有成员变量和方法"}},[a._v("私有成员变量和方法")])]),t("li",[t("a",{attrs:{href:"#定义运算符"}},[a._v("定义运算符")])]),t("li",[t("a",{attrs:{href:"#scala-中的标识符"}},[a._v("Scala 中的标识符")])]),t("li",[t("a",{attrs:{href:"#方法重载"}},[a._v("方法重载")])]),t("li",[t("a",{attrs:{href:"#隐式类型转换"}},[a._v("隐式类型转换")])])])])])]),t("p"),a._v(" "),t("h2",{attrs:{id:"实验介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实验介绍"}},[a._v("#")]),a._v(" 实验介绍")]),a._v(" "),t("h4",{attrs:{id:"实验内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实验内容"}},[a._v("#")]),a._v(" 实验内容")]),a._v(" "),t("p",[a._v("有了前面的 Scala 的基本知识，本实验将介绍如何定义完整功能的 Scala 类定义。")]),a._v(" "),t("p",[a._v("本实验着重介绍如何定义 "),t("code",[a._v("Functional objects")]),a._v("（函数化对象或是方程化对象），函数化对象指的是所定义的类或对象不包含任何可以修改的状态。")]),a._v(" "),t("p",[a._v("本实验定义了一个有理数类定义的几个不同版本，以介绍 Scala 类定义的几个特性：类参数和构造函数，方法，操作符，私有成员，重载，过载，条件检查，引用自身。")]),a._v(" "),t("h4",{attrs:{id:"实验知识点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实验知识点"}},[a._v("#")]),a._v(" 实验知识点")]),a._v(" "),t("ul",[t("li",[a._v("类的定义规范")]),a._v(" "),t("li",[a._v("定义类")]),a._v(" "),t("li",[a._v("前提条件检查")]),a._v(" "),t("li",[a._v("添加成员变量")]),a._v(" "),t("li",[a._v("自身引用")]),a._v(" "),t("li",[a._v("辅助构造函数")]),a._v(" "),t("li",[a._v("私有成员变量和方法")]),a._v(" "),t("li",[a._v("定义运算符")]),a._v(" "),t("li",[a._v("标识符")]),a._v(" "),t("li",[a._v("方法重载")]),a._v(" "),t("li",[a._v("隐式类型转换")])]),a._v(" "),t("h4",{attrs:{id:"实验环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实验环境"}},[a._v("#")]),a._v(" 实验环境")]),a._v(" "),t("ul",[t("li",[a._v("Scala")]),a._v(" "),t("li",[a._v("Xfce 终端")])]),a._v(" "),t("h4",{attrs:{id:"适合人群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适合人群"}},[a._v("#")]),a._v(" 适合人群")]),a._v(" "),t("p",[a._v("本课程难度为一般，属于初级级别课程，适合零基础或具有 Java 编程基础的用户。")]),a._v(" "),t("h2",{attrs:{id:"开发准备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发准备"}},[a._v("#")]),a._v(" 开发准备")]),a._v(" "),t("p",[a._v("为了使用交互式 Scala 解释器，你可以在打开的终端中输入命令：")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("su")]),a._v(" -l hadoop "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#密码为 hadoop")]),a._v("\nscala\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("当出现 "),t("code",[a._v("scala>")]),a._v(" 开始的命令行提示符时，就说明你已经成功进入解释器了。如下图所示。")]),a._v(" "),t("blockquote",[t("p",[a._v("注意：由于在线实验环境的限制，在 Spark shell 中运行代码会稍微慢一点。")])]),a._v(" "),t("p",[t("img",{attrs:{src:"document-uid702660labid6307timestamp1525416596329-165425955499535.png",alt:"1-2.1-1"}})]),a._v(" "),t("h2",{attrs:{id:"实验步骤-有理数类的表示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实验步骤-有理数类的表示"}},[a._v("#")]),a._v(" 实验步骤（有理数类的表示）")]),a._v(" "),t("h3",{attrs:{id:"rational-类的定义规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rational-类的定义规范"}},[a._v("#")]),a._v(" Rational 类的定义规范")]),a._v(" "),t("p",[a._v("首先，我们回忆下有理数的定义：一个有理数(rational)可以表示成分数形式："),t("code",[a._v("n/d")]),a._v("，其中 "),t("code",[a._v("n")]),a._v(" 和 "),t("code",[a._v("d")]),a._v(" 都是整数（"),t("code",[a._v("d")]),a._v(" 不可以为 "),t("code",[a._v("0")]),a._v("），"),t("code",[a._v("n")]),a._v(" 称为分子（numerator），"),t("code",[a._v("d")]),a._v(" 为分母（denominator）。和浮点数相比，有理数可以精确表达一个分数，而不会有误差。")]),a._v(" "),t("p",[a._v("因此我们定义的 "),t("code",[a._v("Rational")]),a._v(" 类支持上面的有理数的定义。支持有理数的加减乘除，并支持有理数的规范表示，比如 "),t("code",[a._v("2/10")]),a._v("，其规范表示为 "),t("code",[a._v("1/5")]),a._v("。分子和分母的最小公倍数为 "),t("code",[a._v("1")]),a._v("。")]),a._v(" "),t("h3",{attrs:{id:"定义-rational"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义-rational"}},[a._v("#")]),a._v(" 定义 Rational")]),a._v(" "),t("p",[a._v("有了有理数定义的实现规范，我们可以开始设计类 "),t("code",[a._v("Rational")]),a._v("。一个好的起点是考虑用户如何使用这个类，我们已经决定使用 “Immutable” 方式来使用 "),t("code",[a._v("Rational")]),a._v(" 对象，我们需要用户在定义 "),t("code",[a._v("Rational")]),a._v(" 对象时提供分子和分母。因此我们可以开始定义 Rational 类如下：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" d"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("可以看到，和 Java 不同的是，Scala 的类定义可以有参数，称为"),t("code",[a._v("类参数")]),a._v("，如上面的 "),t("code",[a._v("n")]),a._v("、"),t("code",[a._v("d")]),a._v("。Scala 使用类参数，并把类定义和主构造函数合并在一起，在定义类的同时也定义了类的主构造函数。因此 Scala 的类定义相对要简洁些。")]),a._v(" "),t("p",[a._v("Scala 编译器会编译 Scala 类定义包含的任何不属于类成员和类方法的其它代码，这些代码将作为类的主构造函数。比如，我们定义一条打印消息作为类定义的代码：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[a._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" d"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("    println"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Created "')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\ndefined "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Rational\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nCreated "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nres0"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@22f34036")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("p",[a._v("可以看到创建 "),t("code",[a._v("Ratiaonal")]),a._v(" 对象时，自动执行类定义的代码（主构造函数）。")]),a._v(" "),t("h3",{attrs:{id:"重新定义类的-tostring-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重新定义类的-tostring-方法"}},[a._v("#")]),a._v(" 重新定义类的 toString 方法")]),a._v(" "),t("p",[a._v("上面的代码创建 "),t("code",[a._v("Rational(1，2)")]),a._v("，Scala 编译器打印出 "),t("code",[a._v("Rational@22f34036")]),a._v("，这是因为使用了缺省的类的 "),t("code",[a._v("toString() 定义")]),a._v("（"),t("code",[a._v("Object")]),a._v(" 对象的），缺省实现是打印出对象的类名称 + "),t("em",[a._v("@")]),a._v(" + 16 进制数（对象的地址），显示结果不是很直观，因此我们可以重新定义类的 "),t("code",[a._v("toString()")]),a._v(" 方法以显示更有意义的字符。")]),a._v(" "),t("p",[a._v("在 Scala 中，你也可以使用 "),t("code",[a._v("override")]),a._v(" 来重载基类定义的方法，而且必须使用 "),t("code",[a._v("override")]),a._v(" 关键字表示重新定义基类中的成员。比如：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[a._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" d"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("override")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" toString "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("d\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\ndefined "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Rational\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nx"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" y "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\ny"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("h3",{attrs:{id:"前提条件检查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前提条件检查"}},[a._v("#")]),a._v(" 前提条件检查")]),a._v(" "),t("p",[a._v("前面说过有理数可以表示为 "),t("code",[a._v("n/d")]),a._v("（其中 "),t("code",[a._v("d")]),a._v("、"),t("code",[a._v("n")]),a._v(" 为整数，而 "),t("code",[a._v("d")]),a._v(" 不能为 "),t("code",[a._v("0")]),a._v("）。对于前面的 "),t("code",[a._v("Rational")]),a._v(" 定义，我们如果使用 "),t("code",[a._v("0")]),a._v(" 也是可以的。")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[a._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nres0"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("怎么解决分母不能为 "),t("code",[a._v("0")]),a._v(" 的问题呢？面向对象编程的一个优点是实现了数据的封装，你可以确保在其生命周期过程中是有效的。对于有理数的一个前提条件是分母不可以为 "),t("code",[a._v("0")]),a._v("，Scala 中定义为传入构造函数和方法的参数的限制范围，也就是调用这些函数或方法的调用者需要满足的条件。")]),a._v(" "),t("p",[a._v("Scala 中解决这个问题的一个方法是使用 "),t("code",[a._v("require")]),a._v(" 方法。"),t("code",[a._v("require")]),a._v(" 方法为 "),t("code",[a._v("Predef")]),a._v(" 对象定义的一个方法，Scala 环境自动载入这个类的定义，因此无需使用 "),t("code",[a._v("import")]),a._v(" 引入这个对象。因此修改 "),t("code",[a._v("Rational")]),a._v(" 定义如下：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[a._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" d"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("    require"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("d "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("override")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" toString "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("d\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\ndefined "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Rational\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\njava"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lang"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("IllegalArgumentException"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" requirement failed\n  at scala"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Predef$"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("require"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Predef"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("211")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("33")]),a._v(" elided\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("p",[a._v("可以看到，如果再使用 "),t("code",[a._v("0")]),a._v(" 作为分母，系统将抛出 "),t("code",[a._v("IllegalArgumentException")]),a._v(" 异常。")]),a._v(" "),t("h3",{attrs:{id:"添加成员变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加成员变量"}},[a._v("#")]),a._v(" 添加成员变量")]),a._v(" "),t("p",[a._v("前面我们定义了 "),t("code",[a._v("Rational")]),a._v(" 的主构造函数，并检查了输入不允许分母为 "),t("code",[a._v("0")]),a._v("。下面我们就可以开始实现两个 "),t("code",[a._v("Rational")]),a._v(" 对象相加的操作。我们需要实现的是函数化对象，因此 "),t("code",[a._v("Rational")]),a._v(" 的加法操作应该是返回一个新的 "),t("code",[a._v("Rational")]),a._v(" 对象，而不是返回被相加的对象本身。我们很可能写出如下的实现：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" d"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   require"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("d"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("override")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" toString "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("d\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" add"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("that"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("d "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("d"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("实际上编译器会给出如下编译错误：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" error"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" value d is not a member of Rational\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("d "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("d"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n                                "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("^")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" error"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" value d is not a member of Rational\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("d "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("d"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("这是为什么呢？尽管类参数在新定义的函数的访问范围之内，但仅限于定义类的方法本身（比如之前定义的 "),t("code",[a._v("toString")]),a._v(" 方法，可以直接访问类参数），但对于 "),t("code",[a._v("that")]),a._v(" 来说，无法使用 "),t("code",[a._v("that.d")]),a._v(" 来访问 "),t("code",[a._v("d")]),a._v("。因为 "),t("code",[a._v("that")]),a._v(" 不在定义的类可以访问的范围之内。此时需要定义为类的成员变量。注：后面定义的 "),t("code",[a._v("case class")]),a._v(" 类型编译器自动把类参数定义为类的属性，这时可以使用 "),t("code",[a._v("that.d")]),a._v(" 等来访问类参数。")]),a._v(" "),t("p",[a._v("修改 "),t("code",[a._v("Rational")]),a._v(" 定义，使用成员变量定义如下：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" d"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   require"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("d "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" number "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" denom "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" d\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("override")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" toString "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" number "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("denom\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" add"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("that"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n       number "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("denom "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("number"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" denom"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n       denom "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("denom\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("要注意的是，我们这里定义成员变量都使用了 "),t("code",[a._v("val")]),a._v("，因为我们实现的是 “immutable” 类型的类定义。"),t("code",[a._v("number")]),a._v(" 和 "),t("code",[a._v("denom")]),a._v(" 以及 "),t("code",[a._v("add")]),a._v(" 都可以不定义类型，Scala 编译器能够根据上下文推算出它们的类型。")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[a._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" oneHalf "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\noneHalf"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" twoThirds "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\ntwoThirds"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" oneHalf add twoThirds\nres0"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" oneHalf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("number\nres1"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("可以看到，这时就可以使用 "),t("code",[a._v(".number")]),a._v(" 等来访问类的成员变量。")]),a._v(" "),t("h3",{attrs:{id:"自身引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自身引用"}},[a._v("#")]),a._v(" 自身引用")]),a._v(" "),t("p",[a._v("Scala 也使用 "),t("code",[a._v("this")]),a._v(" 来引用当前对象本身，一般来说访问类成员时无需使用 "),t("code",[a._v("this")]),a._v("，比如实现一个 "),t("code",[a._v("lessThan")]),a._v(" 方法，下面两种实现是等效的。")]),a._v(" "),t("p",[a._v("第一种：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" lessThan"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("that"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("number "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("denom "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("number "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("denom\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("第二种：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" lessThan"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("that"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n   number "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("denom "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("number "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" denom\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("但如果需要引用对象自身，"),t("code",[a._v("this")]),a._v(" 就无法省略，比如下面实现一个返回两个 "),t("code",[a._v("Rational")]),a._v(" 中比较大的一个值：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("that"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("lessThan"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" that "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("其中的 "),t("code",[a._v("this")]),a._v(" 就无法省略。")]),a._v(" "),t("h3",{attrs:{id:"辅助构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#辅助构造函数"}},[a._v("#")]),a._v(" 辅助构造函数")]),a._v(" "),t("p",[a._v("在定义类时，很多时候需要定义多个构造函数，在 Scala 中，除主构造函数之外的构造函数都称为辅助构造函数（或是从构造函数），比如对于 "),t("code",[a._v("Rational")]),a._v(" 类来说，如果定义一个整数，就没有必要指明分母，此时只要整数本身就可以定义这个有理数。我们可以为 Rational 定义一个辅助构造函数，"),t("code",[a._v("Scala")]),a._v(" 定义辅助构造函数使用 "),t("code",[a._v("this(…)")]),a._v(" 的语法，所有辅助构造函数名称为 "),t("code",[a._v("this")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("所有 Scala 的辅助构造函数的第一个语句都为调用其它构造函数，也就是 "),t("code",[a._v("this(…)")]),a._v("。被调用的构造函数可以是主构造函数或是其它构造函数（最终会调用主构造函数）。这样使得每个构造函数最终都会调用主构造函数，从而使得主构造函数成为创建类单一入口点。在 Scala 中也只有主构造函数才能调用基类的构造函数，这种限制有它的优点，使得 Scala 构造函数更加简洁以及提高一致性。")]),a._v(" "),t("h3",{attrs:{id:"私有成员变量和方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#私有成员变量和方法"}},[a._v("#")]),a._v(" 私有成员变量和方法")]),a._v(" "),t("p",[a._v("Scala 类定义私有成员的方法也是使用 "),t("code",[a._v("private")]),a._v(" 修饰符，为了实现 "),t("code",[a._v("Rational")]),a._v(" 的规范化显示，我们需要使用一个求分子和分母的最大公约数的私有方法 "),t("code",[a._v("gcd")]),a._v("。同时我们使用一个私有变量 "),t("code",[a._v("g")]),a._v(" 来保存最大公约数，修改 "),t("code",[a._v("Rational")]),a._v(" 的定义：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" d"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    require"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("d "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" g "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" gcd "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("abs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("abs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" number "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("g\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" denom "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" d"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("g\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("override")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" toString "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" number "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("denom\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" add"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("that"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n        number "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("denom "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("number"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" denom"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        denom "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("denom\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" gcd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("b"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" gcd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("66")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("42")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nres0"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br")])]),t("p",[a._v("注意 gcd 的定义，因为它是个 "),t("code",[a._v("回溯")]),a._v(" 函数，必须定义返回值类型。Scala 会根据成员变量出现的顺序依次初始化它们，因此 "),t("code",[a._v("g")]),a._v(" 必须出现在 "),t("code",[a._v("number")]),a._v(" 和 "),t("code",[a._v("denom")]),a._v(" 之前。")]),a._v(" "),t("h3",{attrs:{id:"定义运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义运算符"}},[a._v("#")]),a._v(" 定义运算符")]),a._v(" "),t("p",[a._v("我们使用 "),t("code",[a._v("add")]),a._v(" 定义两个 "),t("code",[a._v("Rational")]),a._v(" 对象的加法。两个 "),t("code",[a._v("Rational")]),a._v(" 加法可以写成 "),t("code",[a._v("x.add(y)")]),a._v(" 或者 "),t("code",[a._v("x add y")]),a._v("。")]),a._v(" "),t("p",[a._v("即使使用 "),t("code",[a._v("x add y")]),a._v(" 还是没有 "),t("code",[a._v("x + y")]),a._v(" 来得简洁。")]),a._v(" "),t("p",[a._v("我们前面说过，在 Scala 中，运算符（操作符）和普通的方法没有什么区别，任何方法都可以写成操作符的语法。比如上面的 "),t("code",[a._v("x add y")]),a._v("。")]),a._v(" "),t("p",[a._v("而在 Scala 中对方法的名称也没有什么特别的限制，你可以使用符号作为类方法的名称，比如使用 "),t("code",[a._v("+")]),a._v("、"),t("code",[a._v("-")]),a._v(" 和 "),t("code",[a._v("*")]),a._v(" 等符号。因此我们可以重新定义 "),t("code",[a._v("Rational")]),a._v(" 如下：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" d"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   require"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("d "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" g "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" gcd "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("abs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("abs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" numer "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("g\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" denom "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" d"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("g\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("override")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" toString "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" numer "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("denom\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("that"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n       numer "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("denom "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("numer"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" denom"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n       denom "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("denom\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("that"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" numer "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("numer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" denom "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" that"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("denom"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" gcd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("b"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" gcd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6312timestamp1525658071832.png",alt:"5-3.9-1"}})]),a._v(" "),t("p",[a._v("这样就可以使用 "),t("code",[a._v("+")]),a._v("、"),t("code",[a._v("*")]),a._v(" 号来实现 "),t("code",[a._v("Rational")]),a._v(" 的加法和乘法。"),t("code",[a._v("+")]),a._v("、"),t("code",[a._v("*")]),a._v(" 的优先级是 Scala 预设的，和整数的 "),t("code",[a._v("+")]),a._v("、"),t("code",[a._v("-")]),a._v("、"),t("code",[a._v("*")]),a._v(" 和 "),t("code",[a._v("/")]),a._v(" 的优先级一样。下面为使用 "),t("code",[a._v("Rational")]),a._v(" 的例子：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[a._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nx"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" y "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\ny"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" y\nres0"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("y\nres1"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("从这个例子也可以看出 Scala 语言的扩展性，你使用 "),t("code",[a._v("Rational")]),a._v(" 对象就像 "),t("code",[a._v("Scala")]),a._v(" 内置的数据类型一样。")]),a._v(" "),t("h3",{attrs:{id:"scala-中的标识符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala-中的标识符"}},[a._v("#")]),a._v(" Scala 中的标识符")]),a._v(" "),t("p",[a._v("从前面的例子我们可以看到 Scala 可以使用两种形式的标志符，字符数字和符号。字符数字使用字母或是下划线开头，后面可以接字母或是数字，符号 "),t("code",[a._v("$")]),a._v(" 在 Scala 中也看作为字母。然而以 "),t("code",[a._v("$")]),a._v(" 开头的标识符为保留的 Scala 编译器产生的标志符使用，应用程序应该避免使用 "),t("code",[a._v("$")]),a._v(" 开始的标识符，以免造成冲突。")]),a._v(" "),t("p",[a._v("Scala 的命名规则采用和 Java 类似的 "),t("code",[a._v("camel")]),a._v(" 命名规则（驼峰命名法），首字符小写，比如 "),t("code",[a._v("toString")]),a._v("。类名的首字符还是使用大写。此外也应该避免使用以下划线结尾的标志符以避免冲突。")]),a._v(" "),t("p",[a._v("符号标志符包含一个或多个符号，如 "),t("code",[a._v("+")]),a._v("、"),t("code",[a._v(":")]),a._v(" 和 "),t("code",[a._v("?")]),a._v("。对于 "),t("code",[a._v("+")]),a._v("、"),t("code",[a._v("++")]),a._v("、"),t("code",[a._v(":::")]),a._v("、"),t("code",[a._v("<")]),a._v("、"),t("code",[a._v("?>")]),a._v("、"),t("code",[a._v(":->")]),a._v(" 之类的符号，Scala 内部实现时会使用转义的标志符。例如对 "),t("code",[a._v(":->")]),a._v(" 使用 "),t("code",[a._v("$colon$minus$greater")]),a._v(" 来表示这个符号。因此，如果你需要在 Java 代码中访问 "),t("code",[a._v(":->")]),a._v(" 方法，你需要使用 Scala 的内部名称 "),t("code",[a._v("$colon$minus$greater")]),a._v("。")]),a._v(" "),t("p",[a._v("混合标志符由字符数字标志符后面跟着一个或多个符号组成，比如 "),t("code",[a._v("unary_+")]),a._v(" 为 Scala 对 "),t("code",[a._v("+")]),a._v(" 方法的内部实现时的名称。")]),a._v(" "),t("p",[a._v("字面量标志符为使用 "),t("code",[a._v('"')]),a._v(" 定义的字符串，比如 "),t("code",[a._v('"x"')]),a._v("、"),t("code",[a._v('"yield"')]),a._v("。你可以在 "),t("code",[a._v('"')]),a._v(" 之间使用任何有效的 Scala 标志符，Scala 将它们解释为一个 Scala 标志符，一个典型的使用是 "),t("code",[a._v("Thread")]),a._v(" 的 "),t("code",[a._v("yield")]),a._v(" 方法，在 Scala 中你不能使用 "),t("code",[a._v("Thread.yield()")]),a._v(" 是因为 yield 为 Scala 中的关键字，你必须使用 "),t("code",[a._v('Thread."yield"()')]),a._v("来使用这个方法。")]),a._v(" "),t("h3",{attrs:{id:"方法重载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法重载"}},[a._v("#")]),a._v(" 方法重载")]),a._v(" "),t("p",[a._v("和 Java 一样，Scala 也支持方法重载，重载的方法参数类型不同却使用同样的方法名称，比如对于 "),t("code",[a._v("Rational")]),a._v(" 对象，"),t("code",[a._v("+")]),a._v(" 的对象可以为另外一个 "),t("code",[a._v("Rational")]),a._v(" 对象，也可以为一个 "),t("code",[a._v("Int")]),a._v(" 对象，此时你可以重载 "),t("code",[a._v("+")]),a._v(" 方法以支持和 "),t("code",[a._v("Int")]),a._v(" 相加。")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("numer "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" denom"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" denom"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6312timestamp1525660309993.png",alt:"5-3.11-1"}})]),a._v(" "),t("h3",{attrs:{id:"隐式类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型转换"}},[a._v("#")]),a._v(" 隐式类型转换")]),a._v(" "),t("p",[a._v("上面我们定义 "),t("code",[a._v("Rational")]),a._v(" 的加法，并重载 "),t("code",[a._v("+")]),a._v(" 以支持整数，"),t("code",[a._v("r + 2")]),a._v("，但如果我们需要 "),t("code",[a._v("2 + r")]),a._v(" 如何呢？下面的例子：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[a._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nx"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" y "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\ny"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" z "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\nz"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" z\nres0"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("14")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\nres1"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" x\n"),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" error"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" overloaded method value "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("with")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("alternatives")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Double")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Double")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("and"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Float")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Float")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("and"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Long")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("and"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("and"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Char")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("and"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Short")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("and"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("and"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("String")]),a._v("\n cannot be applied to "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n              "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" x\n                "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("^")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br")])]),t("p",[a._v("可以看到 "),t("code",[a._v("x + 3")]),a._v(" 没有问题，"),t("code",[a._v("3 + x")]),a._v(" 就报错了，这是因为整数类型不支持和 "),t("code",[a._v("Rational")]),a._v(" 相加。我们不可能去修改 "),t("code",[a._v("Int")]),a._v(" 的定义（除非你重写 Scala 的 "),t("code",[a._v("Int")]),a._v(" 定义）以支持 "),t("code",[a._v("Int")]),a._v(" 和 "),t("code",[a._v("Rational")]),a._v(" 相加。如果你写过 .Net 代码，这可以通过静态扩展方法来实现，Scala 提供了类似的机制来解决这种问题。")]),a._v(" "),t("p",[a._v("如果 "),t("code",[a._v("Int")]),a._v(" 类型能够根据需要自动转换为 "),t("code",[a._v("Rational")]),a._v(" 类型，那么 "),t("code",[a._v("3 + x")]),a._v(" 就可以相加。Scala 通过 "),t("code",[a._v("implicit def")]),a._v(" 定义一个隐含类型转换，比如定义由整数到 "),t("code",[a._v("Rational")]),a._v(" 类型的转换如下：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implicit")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" intToRational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6312timestamp1525660215244.png",alt:"5-3.12-1"}})]),a._v(" "),t("p",[a._v("再重新计算 "),t("code",[a._v("r + 2")]),a._v(" 和 "),t("code",[a._v("2 + r")]),a._v(" 的例子：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[a._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" r "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Rational"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nr"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" r "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nres0"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" r\nres1"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Rational "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("p",[a._v("其实此时 "),t("code",[a._v("Rational")]),a._v(" 的一个 "),t("code",[a._v("+")]),a._v(" 重载方法是多余的，当 Scala 计算 "),t("code",[a._v("2 + r")]),a._v("，发现 "),t("code",[a._v("2(Int)")]),a._v(" 类型没有可以和 "),t("code",[a._v("Rational")]),a._v(" 对象相加的方法，Scala 环境就检查 "),t("code",[a._v("Int")]),a._v(" 的隐含类型转换方法是否有合适的类型转换方法，类型转换后的类型支持 "),t("code",[a._v("+ r")]),a._v("，一检查发现定义了由 "),t("code",[a._v("Int")]),a._v(" 到 "),t("code",[a._v("Rational")]),a._v(" 的隐含转换方法，就自动调用该方法，把整数转换为 "),t("code",[a._v("Rational")]),a._v(" 数据类型，然后调用 "),t("code",[a._v("Rational")]),a._v(" 对象的 "),t("code",[a._v("+")]),a._v(" 方法。从而实现了 "),t("code",[a._v("Rational")]),a._v(" 类或是 "),t("code",[a._v("Int")]),a._v(" 类的扩展。")]),a._v(" "),t("p",[a._v("关于 "),t("code",[a._v("implicit def")]),a._v(" 的详细介绍将由后面的文章来说明，隐含类型转换在设计 Scala 库时非常有用。")])])}),[],!1,null,null,null);s.default=e.exports}}]);