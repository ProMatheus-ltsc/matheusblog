(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{1445:function(s,a,n){"use strict";n.r(a);var t=n(24),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"字节码简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字节码简介"}},[s._v("#")]),s._v(" 字节码简介")]),s._v(" "),n("h2",{attrs:{id:"什么是字节码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是字节码"}},[s._v("#")]),s._v(" 什么是字节码")]),s._v(" "),n("p",[s._v("Java的源代码中编译后会生成一个class文件，文件内容为一些JAVA虚拟机指令，这些指令的内容，由多个十六进制值组成，两个十六进制值为一组，例如：\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/b925704cba7c44c0b843dfde13a9e072.png",alt:"在这里插入图片描述"}}),s._v("\nJava虚拟机的指令由一个字节长度、代表某种特定操作含义的操作码(opcode)以及跟随其后的零个或多个的操作数（operand）构成。\nJava之所以可以“一次编译，到处运行”，一是因为JVM针对各种操作系统、平台都进行了定制。二是因为无论在什么平台，都可以编译生成固定格式的字节码（.class文件）供JVM使用。因此，也可以看出字节码对于Java生态的重要性。")]),s._v(" "),n("h2",{attrs:{id:"为什么要学习字节码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么要学习字节码"}},[s._v("#")]),s._v(" 为什么要学习字节码")]),s._v(" "),n("p",[s._v("对于开发人员，了解字节码可以更准确、直观地理解Java语言中更深层次的东西，比如通过字节码，可以很直观地看到Volatile关键字如何在字节码上生效。另外，字节码增强技术在Spring AOP、各种ORM框架、热部署中的应用屡见不鲜，深入理解其原理对于我们来说大有裨益。除此之外，由于JVM规范的存在，只要最终可以生成符合规范的字节码就可以在JVM上运行，因此这就给了各种运行在JVM上的语言（如Scala、Groovy、Kotlin）一种契机，可以扩展Java所没有的特性或者实现各种语法糖。理解字节码后再学习这些语言，可以“逆流而上”，从字节码视角看它的设计思路，学习起来也“易如反掌”。")]),s._v(" "),n("h1",{attrs:{id:"如何解读字节码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何解读字节码"}},[s._v("#")]),s._v(" 如何解读字节码？")]),s._v(" "),n("h2",{attrs:{id:"准备工作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[s._v("#")]),s._v(" 准备工作")]),s._v(" "),n("p",[s._v("编写如下代码，例如：")]),s._v(" "),n("p",[s._v("package com.java.jvm.bytecode;")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public class IntTests {\n    public static void main(String[] args) {\n        int a=10;\n        int b=20;\n        int c=a+b;\n        System.out.println(c);\n    }\n}\n12345678\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h2",{attrs:{id:"直接解读"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#直接解读"}},[s._v("#")]),s._v(" 直接解读")]),s._v(" "),n("p",[s._v("IntTests.java的源代码编译后，可以通过notepad++(需要安装一下HEX-Editor插件)打开IntTests.class文件，文件内容默认是一种16进制的格式，例如：\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/1a0f8fc6d8c349bf999ac225b290f293.png",alt:"在这里插入图片描述"}}),s._v("\nJVM对于字节码是有规范要求的，看似杂乱的十六进制是符合一定结构规范的。JVM规范要求每一个字节码文件都要按照固定的顺序组成。")]),s._v(" "),n("h2",{attrs:{id:"javap指令应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javap指令应用"}},[s._v("#")]),s._v(" javap指令应用")]),s._v(" "),n("p",[s._v("在IntTests.class目录使用如下代码对类进行反编译，例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("javap -verbose IntTests.class  //可以使用javap –help查看帮助\n1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("编译后的内容如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('Classfile /E:/TCGBIV/DEVCODES/JAVACODES/01-java/target/classes/com/java/jvm/bytecode/IntT\nests.class\n  Last modified 2022-4-30; size 604 bytes\n  MD5 checksum fa079575306a9cf10a1a61cfc4722e88\n  Compiled from "IntTests.java"\npublic class com.java.jvm.bytecode.IntTests\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #5.#23         // java/lang/Object."<init>":()V\n   #2 = Fieldref           #24.#25        // java/lang/System.out:Ljava/io/PrintStream;\n   #3 = Methodref          #26.#27        // java/io/PrintStream.println:(I)V\n   #4 = Class              #28            // com/java/jvm/bytecode/IntTests\n   #5 = Class              #29            // java/lang/Object\n   #6 = Utf8               <init>\n   #7 = Utf8               ()V\n   #8 = Utf8               Code\n   #9 = Utf8               LineNumberTable\n  #10 = Utf8               LocalVariableTable\n  #11 = Utf8               this\n  #12 = Utf8               Lcom/java/jvm/bytecode/IntTests;\n  #13 = Utf8               main\n  #14 = Utf8               ([Ljava/lang/String;)V\n  #15 = Utf8               args\n  #16 = Utf8               [Ljava/lang/String;\n  #17 = Utf8               a\n  #18 = Utf8               I\n  #19 = Utf8               b\n  #20 = Utf8               c\n  #21 = Utf8               SourceFile\n  #22 = Utf8               IntTests.java\n  #23 = NameAndType        #6:#7          // "<init>":()V\n  #24 = Class              #30            // java/lang/System\n  #25 = NameAndType        #31:#32       // out:Ljava/io/PrintStream;\n  #26 = Class              #33            // java/io/PrintStream\n  #27 = NameAndType        #34:#35        // println:(I)V\n  #28 = Utf8               com/java/jvm/bytecode/IntTests\n  #29 = Utf8               java/lang/Object\n  #30 = Utf8               java/lang/System\n  #31 = Utf8               out\n  #32 = Utf8               Ljava/io/PrintStream;\n  #33 = Utf8               java/io/PrintStream\n  #34 = Utf8               println\n  #35 = Utf8               (I)V\n{\n  public com.java.jvm.bytecode.IntTests();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object."<init>":()V\n         4: return\n      LineNumberTable:\n        line 3: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lcom/java/jvm/bytecode/IntTests;\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=4, args_size=1\n         0: bipush        10\n         2: istore_1\n         3: bipush        20\n         5: istore_2\n         6: iload_1\n         7: iload_2\n         8: iadd\n         9: istore_3\n        10: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintSt\nream;\n        13: iload_3\n        14: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V\n        17: return\n      LineNumberTable:\n        line 5: 0\n        line 6: 3\n        line 7: 6\n        line 8: 10\n        line 9: 17\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      18     0  args   [Ljava/lang/String;\n            3      15     1     a   I\n            6      12     2     b   I\n           10       8     3     c   I\n}\nSourceFile: "IntTests.java"\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br")])]),n("p",[s._v("为了帮助人们理解，反编译后看到的是十六进制操作码所对应的助记符，十六进制值操作码与助记符的对应关系，以及每一个操作码的用处可以查看Oracle官方文档进行了解，在需要用到时进行查阅即可。")]),s._v(" "),n("h2",{attrs:{id:"jclasslib插件应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jclasslib插件应用"}},[s._v("#")]),s._v(" jclasslib插件应用")]),s._v(" "),n("p",[s._v("如果每次查看反编译后的字节码都使用javap命令的话，会非常繁琐。这里推荐一个Idea插件，这个插件的名字为jclasslib。代码在编译后，我们可以在菜单栏”View”中选择”Show Bytecode With jclasslib”，可以很直观地看到当前字节码文件的类信息、常量池、方法区等信息。\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/953ea09706ca4a41bccde9ef0aac80d6.png",alt:"在这里插入图片描述"}}),s._v(" "),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/9b2fa235ae44490ca26eaaba7880658a.png",alt:"在这里插入图片描述"}})]),s._v(" "),n("h2",{attrs:{id:"字节码解读课堂练习"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字节码解读课堂练习"}},[s._v("#")]),s._v(" 字节码解读课堂练习")]),s._v(" "),n("p",[s._v("课堂练习：编写如下代码，并查看分析其字节码指令。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("package com.java.jvm.bytecode;\n\npublic class IntCompareTests {\n    public static void main(String[] args) {\n        Integer a=20;\n        int b=20;\n        System.out.println(a==b);\n    }\n}\n123456789\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("基于idea的jclasslib插件对IntCompareTests类的自己码进行查看，如图所示：\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/2cff313af5e94b1b8590161f1a946fea.png",alt:"在这里插入图片描述"}})]),s._v(" "),n("p",[s._v("课堂练习：编写如下代码，基于jclasslib查看字节码，并进行分析字符串是否相等。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.java.jvm.bytecode;\n\npublic class StringCompareTests {\n    public static void main(String[] args) {\n        String s1="hello"+"world";\n        String s2="helloworld";\n        String s3="hello";\n        String s4="world";\n        String s5=s3+s4;\n        System.out.println(s1==s2);\n        System.out.println(s1==s5);\n    }\n}\n12345678910111213\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("课堂练习：编写如下代码，分析输出结果")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.java.jvm.bytecode;\n\nclass Rectangle{//矩形\n    int x=10;\n    public Rectangle(){\n        doPrint();\n        this.x=20;\n    }\n    public void doPrint(){\n        System.out.println("Rectangle.x="+this.x);\n    }\n}\nclass Square extends Rectangle{//正方形\n    int x=30;\n    public Square(){\n        doPrint();\n        this.x=40;\n    }\n    @Override\n    public void doPrint() {\n        System.out.println("Square.x="+this.x);\n    }\n}\n\npublic class ExtendsTests {\n    public static void main(String[] args) {\n        Rectangle r=new Square();\n        System.out.println(r.x);\n    }\n}\n123456789101112131415161718192021222324252627282930\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br")])]),n("h1",{attrs:{id:"字节码结构分析-了解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字节码结构分析-了解"}},[s._v("#")]),s._v(" 字节码结构分析(了解）")]),s._v(" "),n("h2",{attrs:{id:"整体结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#整体结构"}},[s._v("#")]),s._v(" 整体结构")]),s._v(" "),n("p",[s._v("一个class类文件的结构组成如下（u代表一个字节无符号int，其余info类型是复合结构）：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ClassFile {\n    u4             magic;\n    u2             minor_version;\n    u2             major_version;\n    u2             constant_pool_count;\n    cp_info        constant_pool[constant_pool_count-1];\n    u2             access_flags;\n    u2             this_class;\n    u2             super_class;\n    u2             interfaces_count;\n    u2             interfaces[interfaces_count];\n    u2             fields_count;\n    field_info     fields[fields_count];\n    u2             methods_count;\n    method_info    methods[methods_count];\n    u2              attributes_count;\n    attribute_info attributes[attributes_count];\n}\n123456789101112131415161718\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("p",[s._v("其中：\n magic（魔数）\n minor_version（次版本号）\n major_version（主版本号）\n constant_pool_count（常量池计数器）\n constant_pool[constant_pool_count-1]（常量池）\n access_flags（类的访问标志）\n this_class（当前类名索引值）\n super_class（父类名索引值）\n interfaces_count（接口计数）\n interfaces[interfaces_count]（接口数组）\n fields_count（成员变量计数）\n fields[fields_count]（成员变量数组）\n methods_count（方法计数）\n methods[methods_count]（方法数组）\n attributes_count（属性计数）\n attributes[attributes_count]（属性数组）")]),s._v(" "),n("h2",{attrs:{id:"魔数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#魔数"}},[s._v("#")]),s._v(" 魔数")]),s._v(" "),n("p",[s._v(" 所有.class文件的前四个字节都是魔数(Magic Number)，是class文件的标识。\n 魔数的固定值为：0xCAFEBABE。\n 魔数放在文件开头，JVM可以根据文件魔数判断.class文件的合法性。")]),s._v(" "),n("h2",{attrs:{id:"版本号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#版本号"}},[s._v("#")]),s._v(" 版本号")]),s._v(" "),n("p",[s._v(" 版本号为魔数之后的4个字节。例如，版本号“00 00 00 34”。\n 前两个字节表示次版本号（Minor Version），后两个字节表示主版本号（Major Version）。例如，版本号“00 00 00 34”的次版本号转化为十进制为0，主版本号转化为十进制为52，在Oracle官网中查询序号52对应的主版本号为1.8，所以编译该文件的Java版本号为1.8.0。\n 版本号和JAVA编译器的对应关系如图所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/385f17f5d99047d1bcae12504b229cd3.png",alt:"在这里插入图片描述"}})]),s._v(" "),n("p",[s._v("说明，不同版本的Java编译器编译的class文件版本是不一样的。目前，高版本的Java虚拟机可以执行由低版本编译器编译生成的class文件，但是低版本的Java虚拟机不能执行由高版本编译器生成的class文件。否则JVM可能会抛出如下异常：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("java.lang.UnsupportedClassVersionError\n1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"常量池"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常量池"}},[s._v("#")]),s._v(" 常量池")]),s._v(" "),n("p",[s._v("常量池(Constant Pool)整体上分为两部分，常量池计数器以及常量池数据区。")]),s._v(" "),n("p",[n("strong",[s._v("常量池计数器")])]),s._v(" "),n("p",[s._v(" 版本号后面是常量池数量，用两个字节表示。如图所示：\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/5a465b0ee8c5469e8af48b5957d38788.png",alt:"在这里插入图片描述"}})]),s._v(" "),n("p",[s._v(" 常量池容量计数值从1开始，表示常量池有多少个常量，假如constant_pool_count=1表示有0个常量。这里的0024的值为36，其实常量数为35个。\n 索引值0用于表达不引用任何常量池。")]),s._v(" "),n("p",[n("strong",[s._v("常量池数据区")])]),s._v(" "),n("p",[s._v(" 数据区是由constant_pool_count-1个cp_info结构组成，一个cp_info结构对应一个常量。在字节码中共有14种类型的cp_info，每种类型的结构都是固定的。\n 常量池中存储两类常量：字面量(Literal)与符号引用(Symbolic References)。字面量为代码中声明为Final的常量值，符号引用如类和接口的全局限定名、字段的名称和描述符、方法的名称和描述符。\n 常量池中的每个常量都是一个表，用于描述不同结构数据，例如：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/1d3c1911abba4fb48ee605ce83408d46.png",alt:"在这里插入图片描述"}}),s._v("\n其中，cp_info整体结构大同小异，都是先通过Tag来标识类型，然后后续n个字节来描述长度和（或）数据。先知其所以然，以后可以通过javap -verbose 类名命令，查看JVM反编译后的完整常量池，就可以看到反编译结果，将每一个cp_info结构的类型和值都很明确地呈现了出来。")]),s._v(" "),n("h2",{attrs:{id:"访问标识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#访问标识"}},[s._v("#")]),s._v(" 访问标识")]),s._v(" "),n("p",[s._v(" 常量池结束之后的两个字节，描述该Class是类还是接口，以及是否被Public、Abstract、Final等修饰符修饰。\n JVM规范规定了多个访问标志（Access_Flag）。需要注意的是，JVM并没有穷举所有的访问标志，而是使用按位或操作来进行描述的，比如某个类的修饰符为Public Final，则对应的访问修饰符的值为ACC_PUBLIC | ACC_FINAL，即0x0001 | 0x0010=0x0011。")]),s._v(" "),n("h2",{attrs:{id:"类型引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型引用"}},[s._v("#")]),s._v(" 类型引用")]),s._v(" "),n("p",[s._v("在访问标记后，会指定该类的类别、父类类别以及实现的接口。\n 类索引：访问标志后的两个字节，描述的是当前类的全限定名。这两个字节保存的值为常量池中的索引值，根据索引值就能在常量池中找到这个类的全限定名。\n 父类索引：当前类名后的两个字节，描述父类的全限定名，同上，保存的也是常量池中的索引值。\n 接口索引：父类名称后的两字节，描述了该类或父类实现了哪些接口，接口的数量以及所有接口名称的字符串常量的索引值。")]),s._v(" "),n("h2",{attrs:{id:"字段表集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字段表集合"}},[s._v("#")]),s._v(" 字段表集合")]),s._v(" "),n("p",[s._v(" 字段表用于描述类和接口中声明的变量，包含类级别的变量以及实例变量，但是不包含方法内部声明的局部变量。\n 字段表也分为两部分，第一部分为两个字节，描述字段个数；第二部分是每个字段的详细信息fields_in。")]),s._v(" "),n("h2",{attrs:{id:"方法表集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法表集合"}},[s._v("#")]),s._v(" 方法表集合")]),s._v(" "),n("p",[s._v(" 字段表结束后为方法表，用于描述每个方法的信息。\n 方法表也是由两部分组成，第一部分为两个字节描述方法的个数；第二部分为每个方法的详细信息。方法的详细信息较为复杂，包括方法的访问标志、方法名、方法的描述符以及方法的属性。")]),s._v(" "),n("h2",{attrs:{id:"属性表集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性表集合"}},[s._v("#")]),s._v(" 属性表集合")]),s._v(" "),n("p",[s._v("方法表集合之后是属性表集合，用于描述的是class文件所携带的辅助信息，比如class文件对应的源文件信息。了解即可。")]),s._v(" "),n("h1",{attrs:{id:"总结-summary"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结-summary"}},[s._v("#")]),s._v(" 总结(Summary)")]),s._v(" "),n("p",[s._v("本章节主要描述了字节码是什么，如何解读字节码以及字节码主要由哪及部分构成。")])])}),[],!1,null,null,null);a.default=e.exports}}]);