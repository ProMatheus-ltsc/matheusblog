(window.webpackJsonp=window.webpackJsonp||[]).push([[310],{1704:function(s,a,t){"use strict";t.r(a);var n=t(24),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"组合和继承-一"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合和继承-一"}},[s._v("#")]),s._v(" 组合和继承(一)")]),s._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#实验介绍"}},[s._v("实验介绍")])]),t("li",[t("a",{attrs:{href:"#开发准备"}},[s._v("开发准备")])]),t("li",[t("a",{attrs:{href:"#实验步骤"}},[s._v("实验步骤")]),t("ul",[t("li",[t("a",{attrs:{href:"#概述"}},[s._v("概述")])]),t("li",[t("a",{attrs:{href:"#组合和继承"}},[s._v("组合和继承")])]),t("li",[t("a",{attrs:{href:"#扩展类"}},[s._v("扩展类")])]),t("li",[t("a",{attrs:{href:"#重写成员函数和方法"}},[s._v("重写成员函数和方法")])]),t("li",[t("a",{attrs:{href:"#定义参数化成员变量"}},[s._v("定义参数化成员变量")])]),t("li",[t("a",{attrs:{href:"#调用基类构造函数"}},[s._v("调用基类构造函数")])]),t("li",[t("a",{attrs:{href:"#多态和动态绑定"}},[s._v("多态和动态绑定")])]),t("li",[t("a",{attrs:{href:"#定义-final-成员"}},[s._v("定义 final 成员")])])])])])]),t("p"),s._v(" "),t("h2",{attrs:{id:"实验介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实验介绍"}},[s._v("#")]),s._v(" 实验介绍")]),s._v(" "),t("h4",{attrs:{id:"实验内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实验内容"}},[s._v("#")]),s._v(" 实验内容")]),s._v(" "),t("p",[s._v("在前面我们介绍了 Scala 面向对象的一些基本概念，从本实验开始，我们将继续介绍 Scala 面向对象方法的知识。")]),s._v(" "),t("h4",{attrs:{id:"实验知识点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实验知识点"}},[s._v("#")]),s._v(" 实验知识点")]),s._v(" "),t("ul",[t("li",[s._v("抽象类")]),s._v(" "),t("li",[s._v("定义无参数方法")]),s._v(" "),t("li",[s._v("扩展类")]),s._v(" "),t("li",[s._v("重写成员函数和方法")]),s._v(" "),t("li",[s._v("定义参数化成员变量")]),s._v(" "),t("li",[s._v("调用基类构造函数")]),s._v(" "),t("li",[s._v("多态和动态绑定")]),s._v(" "),t("li",[s._v("定义 final 成员")])]),s._v(" "),t("h4",{attrs:{id:"实验环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实验环境"}},[s._v("#")]),s._v(" 实验环境")]),s._v(" "),t("ul",[t("li",[s._v("Scala")]),s._v(" "),t("li",[s._v("Xfce 终端")])]),s._v(" "),t("h4",{attrs:{id:"适合人群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适合人群"}},[s._v("#")]),s._v(" 适合人群")]),s._v(" "),t("p",[s._v("本课程难度为一般，属于初级级别课程，适合零基础或具有 Java 编程基础的用户。")]),s._v(" "),t("h2",{attrs:{id:"开发准备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发准备"}},[s._v("#")]),s._v(" 开发准备")]),s._v(" "),t("p",[s._v("为了使用交互式 Scala 解释器，你可以在打开的终端中输入命令：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("su")]),s._v(" -l hadoop "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#密码为 hadoop")]),s._v("\nscala\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("当出现 "),t("code",[s._v("scala>")]),s._v(" 开始的命令行提示符时，就说明你已经成功进入解释器了。如下图所示。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意：由于在线实验环境的限制，在 Spark shell 中运行代码会稍微慢一点")])]),s._v(" "),t("p",[t("img",{attrs:{src:"document-uid702660labid6307timestamp1525416596329-165426003930676.png",alt:"1-2.1-1"}})]),s._v(" "),t("h2",{attrs:{id:"实验步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实验步骤"}},[s._v("#")]),s._v(" 实验步骤")]),s._v(" "),t("h3",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),t("p",[s._v("定义一个新类的方法主要有两种模式：一个通过组合的方式，新创建的类通过引用其它类组合而成；另一个则不是通过这些引用类组合来完成新功能，而是通过继承的方式来扩展基类。")]),s._v(" "),t("p",[s._v("为了更好的介绍 Scala 类的组合和继承，以及抽象类、无参数方法、扩展类、方法的重写等，我们打算使用一个现实的例子来说明。因此本节首先定义需要解答的问题。")]),s._v(" "),t("p",[s._v("我们需要定义一个函数库。这个库用来定义在平面上（二维空间）的布局元素，每个元素使用一个含有文字的矩形来表示。为方便起见，我们定义一个类构造工厂方法 "),t("code",[s._v("elem")]),s._v("，根据传入的数据来创建一个布局元素。")]),s._v(" "),t("p",[s._v("这个方法的接口定义如下：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[s._v("elem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Element\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("你可以看到，布局元素使用类型 "),t("code",[s._v("Element")]),s._v(" 来构造其模型。你可以调用 "),t("code",[s._v("above")]),s._v(" 和 "),t("code",[s._v("beside")]),s._v(" 方法来创建一个新的布局元素。这个新的布局元素由两个已经存在的布局元素组合而成。例如：下面的表达式使用多个布局元素构造一个更大区域的布局元素：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" column1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" elem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("quot"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("Hello"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("quot"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" above elem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("quot"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("quot"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" column2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" elem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("quot"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("quot"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" above "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("quot"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("World"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("quot"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ncolumn1 beside column2\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("将打印出下面结果：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("Hello ***\n*** world\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("这个例子使用了布局元素。这是一个非常好的例子，可以用来说明一个对象可以由更简单的对象，通过组合的方式来构造。后文将以此为基础。我们将定义一些类，这些类支持使用数组，线段，矩形（简单部件）来构造，并定义组合算子（操作符) "),t("code",[s._v("above")]),s._v(" 和 "),t("code",[s._v("beside")]),s._v("。")]),s._v(" "),t("p",[s._v("使用组合算子的概念来设计函数库是一种非常好的方法，它是在应用域构建对象的基础方法。什么是简单对象？用什么方式能让更多有趣的对象通过简单对象构造出来？组合子是怎么挂在一起的？什么是最通用的组合？它们满足任何有趣的规则吗？如果你对这些问题都有好的答案，你的库设计就在正轨上了。")]),s._v(" "),t("h3",{attrs:{id:"组合和继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合和继承"}},[s._v("#")]),s._v(" 组合和继承")]),s._v(" "),t("h4",{attrs:{id:"抽象类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[s._v("#")]),s._v(" 抽象类")]),s._v(" "),t("p",[s._v("上一小节中，我们定义了我们需要解决的问题。我们首要的任务是定义 "),t("code",[s._v("Element")]),s._v(" 类型，这个类型用来表示一个布局元素。由于每个元素是一个具有二维矩形形状的字符串，因此，我们理所当然的可以定义个成员变量 "),t("code",[s._v("content")]),s._v("，用它来表示这个二维布局元素的内容。我们使用一个字符串的数组来表示这个元素，这个数组的每个字符串元素代表布局的一行。也就是说，"),t("code",[s._v("contents")]),s._v(" 的类型为 "),t("code",[s._v("Array[String]")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525764243060.png",alt:"9-3.2.1-1"}})]),s._v(" "),t("p",[s._v("在这个类中，成员 "),t("code",[s._v("contents")]),s._v(" 使用了没有定义具体实现的方法来定义，这个方法称为——“抽象方法”。一个含有抽象方法的类必须定义成抽象类，也就是使用 "),t("code",[s._v("abstract")]),s._v(" 关键字来定义类。")]),s._v(" "),t("p",[t("code",[s._v("abstract")]),s._v(" 修饰符表示所定义的类可能含有一些没有定义具体实现的抽象成员，因此你不能构建抽象类的实例。如果你试图这么做，编译器将报错：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[s._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" Element\n"),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" error"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Element is "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" cannot be instantiated\n              "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" Element\n              "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("后文将继续介绍如何创建这个抽象类的子类，你可以构造这些子类的具体实例。这是因为这些子类实现了抽象成员。")]),s._v(" "),t("p",[s._v("要注意的是，"),t("code",[s._v("contents")]),s._v(" 方法本身没有使用 "),t("code",[s._v("abstract")]),s._v(" 修饰符。一个没有定义实现的方法就是抽象方法，与 Java 不同的是，抽象方法不需要使用 "),t("code",[s._v("abstract")]),s._v(" 修饰符来表示，只要这个方法没有具体实现，就是抽象方法。相反，如果该方法有具体实现，称为“具体*（*concrete）”方法。")]),s._v(" "),t("p",[s._v("另一个术语用法需要分辨：声明（"),t("code",[s._v("declaration")]),s._v("）和定义（"),t("code",[s._v("definition")]),s._v("）。类 "),t("code",[s._v("Element")]),s._v(" 声明了抽象方法 "),t("code",[s._v("contents")]),s._v("，但当前没有定义具体方法。在下一小节，我们要定义一些具体方法来加强 "),t("code",[s._v("Element")]),s._v("。")]),s._v(" "),t("h4",{attrs:{id:"定义无参数方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义无参数方法"}},[s._v("#")]),s._v(" 定义无参数方法")]),s._v(" "),t("p",[s._v("作为接下来的一步，我们将向 Element 添加显示宽度和高度的方法。"),t("code",[s._v("height")]),s._v(" 方法返回 "),t("code",[s._v("contents")]),s._v(" 里的行数。"),t("code",[s._v("width")]),s._v(" 方法返回第一行的长度，或如果元素没有行记录，返回零。")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" height"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" width"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("height "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525764285580.png",alt:"9-3.2.2-1"}})]),s._v(" "),t("p",[s._v("请注意 "),t("code",[s._v("Element")]),s._v(" 的三个方法都没有参数列表，甚至连个空列表都没有。这种无参数方法在 Scala 里是非常普通的。相对的，带有空括号的方法定义，如 "),t("code",[s._v("def height(): Int")]),s._v("，被称为空括号方法（"),t("code",[s._v("empty-paren method")]),s._v("）。")]),s._v(" "),t("p",[s._v("Scala 的惯例是在方法不需要参数并且只是读取对象状态时，使用无参数方法。")]),s._v(" "),t("p",[s._v("此外，我们也可以使用成员变量来定义 "),t("code",[s._v("width")]),s._v(" 和 "),t("code",[s._v("height")]),s._v("，例如：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" height "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" width "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("height "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525764304932.png",alt:"9-3.2.2-2"}})]),s._v(" "),t("p",[s._v("从使用这个类的客户代码来说，这两个实现是等价的。唯一的差别是：使用成员变量的方法调用速度要快些。因为字段值在类被初始化的时候被预计算，而方法调用在每次调用的时候都要计算。换句话说，字段在每个 "),t("code",[s._v("Element")]),s._v(" 对象上需要更多的内存空间。")]),s._v(" "),t("p",[s._v("特别是如果类的字段变成了访问函数，且访问函数是纯函数的，也就是说它没有副作用，并且不依赖于可变状态。那么，类 Element 的客户不需要被重写。这称为统一访问原则： "),t("code",[s._v("uniform access principle")]),s._v("，也就是说客户代码不应受到通过字段还是方法实现属性的决定的影响。")]),s._v(" "),t("p",[s._v("Scala 代码可以调用 Java 函数和类，而 Java 没有使用“统一访问原则”，因此 Java 里是 "),t("code",[s._v("string.length()")]),s._v("，不是 "),t("code",[s._v("string.length")]),s._v("。为了解决这个问题，Scala 对于无参数函数和空括号函数的使用上并不是区分得很严格。也就是说，你可以用空括号方法重写无参数方法，反之亦可。你还可以在调用任何不带参数的方法时省略空的括号。例如，下面两行在 Scala 里都是合法的：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[s._v("Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("toString\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("原则上，Scala 的函数调用中可以省略所有的空括号。但如果使用的函数不是纯函数，也就是说这个不带参数的函数可能修改对象的状态或是我们需要利用它的一些副作用（比如打印到屏幕，读写 I/O），一般的建议还是使用空括号，比如：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 没有副作用，所以无须()")]),s._v("\nprintln"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 最好别省略()")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("总结起来，Scala 里定义不带参数也没有副作用的方法为无参数方法。也就是说，省略空的括号是鼓励的风格。另一方面，永远不要定义没有括号的带副作用的方法，因为那样的话，方法调用看上去会像选择一个字段。")]),s._v(" "),t("h3",{attrs:{id:"扩展类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展类"}},[s._v("#")]),s._v(" 扩展类")]),s._v(" "),t("p",[s._v("我们需要能够创建新的布局元素对象，前面定义的 "),t("code",[s._v("Element")]),s._v(" 为抽象类，不能直接用来创建该类的对象。因此，我们需要创建 "),t("code",[s._v("Element")]),s._v(" 的子类。这些子类需要实现 "),t("code",[s._v("Element")]),s._v(" 类定义的抽象函数。")]),s._v(" "),t("p",[s._v("Scala 中派生子类的方法和 Java 一样，也是通过 "),t("code",[s._v("extends")]),s._v(" 关键字。比如定义一个 "),t("code",[s._v("ArrayElement")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" ArrayElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("conts"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" conts\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525766432548.png",alt:"9-3.3-1"}})]),s._v(" "),t("p",[s._v("其中 "),t("code",[s._v("extends")]),s._v(" 具有两个功效：一是让 "),t("code",[s._v("ArrayElement")]),s._v(" 继承所有 "),t("code",[s._v("Element")]),s._v(" 类的非私有成员；二是使得 "),t("code",[s._v("ArrayElement")]),s._v(" 成为 "),t("code",[s._v("Element")]),s._v(" 的一个子类。而 "),t("code",[s._v("Element")]),s._v(" 称为 "),t("code",[s._v("ArrayElement")]),s._v(" 的父类。")]),s._v(" "),t("p",[s._v("如果你在定义类时没有使用 "),t("code",[s._v("extends")]),s._v(" 关键字，在 Scala 中，这个定义类默认继承自 "),t("code",[s._v("scala.AnyRef")]),s._v("，如同在 Java 中缺省继承自 "),t("code",[s._v("java.lang.Object")]),s._v("。这种继承关系如下图：")]),s._v(" "),t("p",[t("img",{attrs:{src:"document-uid162034labid1679timestamp1454339335782.png",alt:"9-3.3-2"}})]),s._v(" "),t("p",[s._v("这幅图中也显示了 "),t("code",[s._v("ArrayElement")]),s._v(" 和 "),t("code",[s._v("Array[String]")]),s._v(" 之间的“组合”关系”（composition），类 "),t("code",[s._v("ArrayElement")]),s._v(" 中定义了对 "),t("code",[s._v("Array[String]")]),s._v(" 类型对象的一个引用。")]),s._v(" "),t("p",[t("code",[s._v("ArrayElement")]),s._v(" 继承了 "),t("code",[s._v("Element")]),s._v(" 的所有非私有成员，同时定义了一个 "),t("code",[s._v("contents")]),s._v(" 函数。这个函数中，其父类（基类）中是抽象的，因此可以说 "),t("code",[s._v("ArrayElement")]),s._v(" 中的 "),t("code",[s._v("contents")]),s._v(" 函数实现了父类中的这个抽象函数，也可以说“重写（override）”了父类中的同名函数。")]),s._v(" "),t("p",[t("code",[s._v("ArrayElement")]),s._v(" 继承了 "),t("code",[s._v("Element")]),s._v(" 的 "),t("code",[s._v("width")]),s._v(" 和 "),t("code",[s._v("height")]),s._v(" 方法，因此你可以使用 "),t("code",[s._v("ArrayElement.width")]),s._v(" 来查询宽度。比如：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[s._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" ae "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" ArrayElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nae"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ArrayElement "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ArrayElement"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@729c1e43")]),s._v("\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" ae"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("width\nres0"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("派生也意味着子类的值，可以用在任何可以使用同名父类值的地方。比如：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" ArrayElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"重写成员函数和方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重写成员函数和方法"}},[s._v("#")]),s._v(" 重写成员函数和方法")]),s._v(" "),t("p",[s._v("和 Java 稍有不同的一点是，Scala 中成员函数和成员变量地位几乎相同，而且也处在同一个命名空间。也就是说，Scala 中不允许定义同名的成员函数和成员变量，但带来的一个好处是，可以使用成员变量来重写一个不带参数的成员函数。比如，接着前面的例子，你可以通过一个成员变量来实现基类中定义的抽象函数 "),t("code",[s._v("contents")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" ArrayElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("conts"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" conts\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525766468151.png",alt:"9-3.4-1"}})]),s._v(" "),t("p",[s._v("可以看到，使用成员变量来实现基类中不带参数的抽象函数，是一个非常恰当的例子。Scala 中的这种实现是 Java 语言所不支持的，一般来说只有两个不同的命名空间来定义类，而 Java 可以有四个，Scala 支持的两个命名空间如下：")]),s._v(" "),t("ul",[t("li",[s._v("值（字段，方法，包还有单例对象）")]),s._v(" "),t("li",[s._v("类型（类和 "),t("code",[s._v("Trait")]),s._v(" 名）")])]),s._v(" "),t("p",[s._v("Scala 把字段和方法放进同一个命名空间的理由很清楚，因为这样做，你就可以使用 "),t("code",[s._v("val")]),s._v(" 重写无参数的方法。")]),s._v(" "),t("h3",{attrs:{id:"定义参数化成员变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义参数化成员变量"}},[s._v("#")]),s._v(" 定义参数化成员变量")]),s._v(" "),t("p",[s._v("我们回到前面定义的类 "),t("code",[s._v("ArrayElement")]),s._v("，它有一个参数 "),t("code",[s._v("conts")]),s._v("，其唯一的目的，是用来复制到 "),t("code",[s._v("contents")]),s._v(" 成员变量。而参数名称 "),t("code",[s._v("conts")]),s._v(" 是为了让它看起来和成员变量 "),t("code",[s._v("contents")]),s._v(" 类似，而又不至于和成员变量名冲突。")]),s._v(" "),t("p",[s._v("Scala 支持使用参数化成员变量，也就是把参数和成员变量定义合并到一起来避免上述冲突：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" ArrayElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525766492318.png",alt:"9-3.5-1"}})]),s._v(" "),t("p",[s._v("要注意的是，现在参数 "),t("code",[s._v("contents")]),s._v(" 前面加上了 "),t("code",[s._v("val")]),s._v(" 关键字，这是前面使用同名参数和同名成员变量的一个缩写形式。使用 "),t("code",[s._v("val")]),s._v(" 定义了一个无法重新赋值的成员变量。这个成员变量初始值为参数的值，可以在类的外面访问这个成员变量。它的一个等效的实现如下：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" ArrayElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" x123"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x123\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525766512886.png",alt:"9-3.5-2"}})]),s._v(" "),t("p",[s._v("Scala 也允许你使用 "),t("code",[s._v("var")]),s._v(" 关键字来定义参数化成员变量，使用 "),t("code",[s._v("var")]),s._v(" 定义的成员变量，可以重新赋值。")]),s._v(" "),t("p",[s._v("此外，Scala 也允许你使用 "),t("code",[s._v("private")]),s._v("、"),t("code",[s._v("protected")]),s._v(" 和 "),t("code",[s._v("override")]),s._v(" 来修饰参数化成员变量。这与你定义普通的成员变量的用法一样。比如：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Cat "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" dangerous "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Tiger "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" dangerous"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Boolean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Cat\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525766534765.png",alt:"9-3.5-3"}})]),s._v(" "),t("p",[s._v("这段代码中 "),t("code",[s._v("Tiger")]),s._v(" 的定义其实为下面类定义的一个缩写：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Tiger"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("param1"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Boolean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" param2"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Cat "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" dangerous "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" param1\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" param2\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525766551773.png",alt:"9-3.5-4"}})]),s._v(" "),t("p",[s._v("两个成员都初始化自相应的参数。我们任意选择了这些参数名，即 "),t("code",[s._v("param1")]),s._v(" 和 "),t("code",[s._v("param2")]),s._v("。重要的是，它们不会与范围内的任何其它名称冲突。")]),s._v(" "),t("h3",{attrs:{id:"调用基类构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调用基类构造函数"}},[s._v("#")]),s._v(" 调用基类构造函数")]),s._v(" "),t("p",[s._v("前面我们定义了两个类，一个为抽象类 "),t("code",[s._v("Element")]),s._v("，另外一个为派生的实类 "),t("code",[s._v("ArrayElement")]),s._v("。或许你打算再构造一个新类，这个类使用单个字符串来构造布局元素，使用面向对象的编程方法使得构造这种新类非常容易。比如下面的 LineElement 类。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意：这里重写方法，需要使用前面的方法而不是 val 的类，可以再次定义类。")])]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" height"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" width"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("height "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" ArrayElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("conts"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" conts\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" LineElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" ArrayElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" width "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" height "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525768044541.png",alt:"9-3.6-1"}})]),s._v(" "),t("p",[s._v("由于 "),t("code",[s._v("LineElement")]),s._v(" 扩展了 "),t("code",[s._v("ArrayElement")]),s._v("，并且 "),t("code",[s._v("ArrayElement")]),s._v(" 的构造器带一个参数（"),t("code",[s._v("Array[String]")]),s._v("）。"),t("code",[s._v("LineElement")]),s._v(" 需要传递一个参数到它的基类的主构造器。要调用基类构造器，只要把你要传递的参数或参数列表放在基类名之后的括号里即可。例如，类 "),t("code",[s._v("LineElement")]),s._v(" 传递了 "),t("code",[s._v("Array(s)")]),s._v(" 到 "),t("code",[s._v("ArrayElement")]),s._v(" 的主构造器，把它放在基类 "),t("code",[s._v("ArrayElement")]),s._v(" 的名称后面的括号里：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" ArrayElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("有了新的子类，布局元素的继承级别现在看起来就如下图所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"document-uid162034labid1679timestamp1454340044527.png",alt:"9-3.6-2"}})]),s._v(" "),t("h3",{attrs:{id:"多态和动态绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多态和动态绑定"}},[s._v("#")]),s._v(" 多态和动态绑定")]),s._v(" "),t("p",[s._v("在前面的例子中，我们看到类型为 "),t("code",[s._v("Element")]),s._v(" 的变量可以保存 "),t("code",[s._v("ArrayElement")]),s._v(" 类型的对象，这种现象称为“多态”。也就是说，基类类型的变量可以保存其子类类型的对象。到目前为止，我们定义了两个 "),t("code",[s._v("Element")]),s._v(" 的子类，"),t("code",[s._v("ArrayElement")]),s._v(" 和 "),t("code",[s._v("LineElement")]),s._v("。你还可以定义其它子类，比如：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" UniformElement "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ch "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Char")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" width"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" height"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Int")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" line "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("toString "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" width\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" contents "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fill"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("height"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("line"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525770257438.png",alt:"9-3.7-1"}})]),s._v(" "),t("p",[s._v("结合前面定义的类定义，我们就有了如下图所示的类层次关系：")]),s._v(" "),t("p",[t("img",{attrs:{src:"document-uid162034labid1679timestamp1454380921951.png",alt:"9-3.7-2"}})]),s._v(" "),t("p",[s._v("Scala 将接受下列所有的赋值，因为赋值表达式的类型符合定义的变量类型：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" e1"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" ArrayElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" ae"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ArrayElement "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" LineElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" e2"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ae\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" e3"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" UniformElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token char"}},[s._v("'x'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525770288708.png",alt:"9-3.7-3"}})]),s._v(" "),t("p",[s._v("若你检查继承层次关系，你会发现：这四个 "),t("code",[s._v("val")]),s._v(" 定义的每一个表达式，等号右侧表达式的类型都在被初始化的等号左侧的 "),t("code",[s._v("val")]),s._v(" 类型的层次之下。")]),s._v(" "),t("p",[s._v("另一方面，如果调用变量（对象）的方法或成员变量，这个过程是一个动态绑定的过程。也就是说，调用哪个类型的方法，取决于运行时变量当前的类型，而不是定义变量的类型。")]),s._v(" "),t("p",[s._v("为了显示这种行为，我们在 "),t("code",[s._v("Element")]),s._v(" 中添加一个 "),t("code",[s._v("demo")]),s._v(" 方法，定义如下：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" demo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    println"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Element\'s implementation invoked"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" ArrayElement "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" demo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    println"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ArrayElement\'s implementation invoked"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" LineElement "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" ArrayElement "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" demo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    println"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"LineElement\'s implementation invoked"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// UniformElement inherits Element’s demo")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" UniformElement "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Element\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525770307354.png",alt:"9-3.7-4"}})]),s._v(" "),t("p",[s._v("在交互式 Scala 解释器中测试时（例如实验楼提供的环境中），你可以定义如下的方法：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" invokeDemo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("demo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525770435920.png",alt:"9-3.7-5"}})]),s._v(" "),t("p",[s._v("下面我们分别使用 "),t("code",[s._v("ArrayElement")]),s._v("、"),t("code",[s._v("LineElement")]),s._v(" 和 "),t("code",[s._v("UniformElement")]),s._v(" 来调用这个方法：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[s._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" invokeDemo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" ArrayElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nArrayElement"),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v("'s")]),s._v(" implementation invoked\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" invokeDemo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" LineElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nLineElement"),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v("'s")]),s._v(" implementation invoked\n\nscala"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" invokeDemo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" UniformElement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nElement"),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v("'s")]),s._v(" implementation invoked\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"定义-final-成员"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义-final-成员"}},[s._v("#")]),s._v(" 定义 final 成员")]),s._v(" "),t("p",[s._v("在定义类的继承关系时，有时你可能不希望基类的某些成员被子类重写。和 Java 类似，在 Scala 中也是使用 "),t("code",[s._v("final")]),s._v(" 来修饰类的成员。比如，在前面的 "),t("code",[s._v("ArrayElement")]),s._v(" 例子中，在 demo 方法前加上 "),t("code",[s._v("final")]),s._v(" 修饰符：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" ArrayElement "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" demo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    println"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ArrayElement\'s implementation invoked"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525770763438.png",alt:"9-3.8-1"}})]),s._v(" "),t("p",[s._v("如果 "),t("code",[s._v("LineElement")]),s._v(" 试图重写 "),t("code",[s._v("demo")]),s._v("，则会报错：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[s._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" LineElement "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" ArrayElement "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" demo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     println"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"LineElement\'s implementation invoked"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" error"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" overriding method demo in "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" ArrayElement of "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Unit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n method demo cannot "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" member\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" demo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("如果你希望某个类不可以派生子类，则可以在类定义前加上 "),t("code",[s._v("final")]),s._v(" 修饰符：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" ArrayElement "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" Element "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" demo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    println"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ArrayElement\'s implementation invoked"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("img",{attrs:{src:"document-uid702660labid6316timestamp1525770781835.png",alt:"9-3.8-2"}})]),s._v(" "),t("p",[s._v("此时如果还是重写 "),t("code",[s._v("LineElement")]),s._v(" 的 "),t("code",[s._v("demo")]),s._v(" 函数，则会报错：")]),s._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[s._v("scala"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" LineElement "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" ArrayElement "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" demo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     println"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"LineElement\'s implementation invoked"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" error"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" illegal inheritance from "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" ArrayElement\n       "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" LineElement "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" ArrayElement "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);