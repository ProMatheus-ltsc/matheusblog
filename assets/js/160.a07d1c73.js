(window.webpackJsonp=window.webpackJsonp||[]).push([[160],{1480:function(t,e,r){"use strict";r.r(e);var a=r(65),o=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"chapter-11-concurrency-并发"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#chapter-11-concurrency-并发"}},[t._v("#")]),t._v(" Chapter 11. Concurrency（并发）")]),t._v(" "),r("h3",{attrs:{id:"chapter-11-introduction-章节介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#chapter-11-introduction-章节介绍"}},[t._v("#")]),t._v(" Chapter 11 Introduction（章节介绍）")]),t._v(" "),r("p",[t._v("THREADS allow multiple activities to proceed concurrently. Concurrent programming is harder than single-threaded programming, because more things can go wrong, and failures can be hard to reproduce. You can’t avoid concurrency. It is inherent in the platform and a requirement if you are to obtain good performance from multicore processors, which are now ubiquitous. This chapter contains advice to help you write clear, correct, well-documented concurrent programs.")]),t._v(" "),r("p",[t._v("线程允许多个活动并发进行。并发编程比单线程编程更困难，容易出错的地方更多，而且失败很难重现。你无法避开并发。它是平台中固有的，并且多核处理器现在也是无处不在，而你会有从多核处理器获得良好的性能的需求。本章包含一些建议，帮助你编写清晰、正确、文档良好的并发程序。")]),t._v(" "),r("h3",{attrs:{id:"contents-of-the-chapter-章节目录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#contents-of-the-chapter-章节目录"}},[t._v("#")]),t._v(" Contents of the chapter（章节目录）")]),t._v(" "),r("ul",[r("li",[r("RouterLink",{attrs:{to:"/Chapter-11/Chapter-11-Item-78-Synchronize-access-to-shared-mutable-data.html"}},[t._v("Item 78: Synchronize access to shared mutable data（对共享可变数据的同步访问）")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/Chapter-11/Chapter-11-Item-79-Avoid-excessive-synchronization.html"}},[t._v("Item 79: Avoid excessive synchronization（避免过度同步）")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/Chapter-11/Chapter-11-Item-80-Prefer-executors,-tasks,-and-streams-to-threads.html"}},[t._v("Item 80: Prefer executors, tasks, and streams to threads（Executor、task、流优于直接使用线程）")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/Chapter-11/Chapter-11-Item-81-Prefer-concurrency-utilities-to-wait-and-notify.html"}},[t._v("Item 81: Prefer concurrency utilities to wait and notify（并发实用工具优于 wait 和 notify）")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/Chapter-11/Chapter-11-Item-82-Document-thread-safety.html"}},[t._v("Item 82: Document thread safety（文档应包含线程安全属性）")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/Chapter-11/Chapter-11-Item-83-Use-lazy-initialization-judiciously.html"}},[t._v("Item 83: Use lazy initialization judiciously（明智地使用延迟初始化）")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/Chapter-11/Chapter-11-Item-84-Don’t-depend-on-the-thread-scheduler.html"}},[t._v("Item 84: Don’t depend on the thread scheduler（不要依赖线程调度器）")])],1)])])}),[],!1,null,null,null);e.default=o.exports}}]);