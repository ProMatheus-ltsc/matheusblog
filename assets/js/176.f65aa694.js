(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{1433:function(a,s,t){"use strict";t.r(s);var n=t(24),r=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"springboot工程中事务控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springboot工程中事务控制"}},[a._v("#")]),a._v(" SpringBoot工程中事务控制")]),a._v(" "),t("h2",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),t("p",[a._v("Spring "),t("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E6%A1%86%E6%9E%B6&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[a._v("框架"),t("OutboundLink")],1),a._v("中提供了一种声明式事务的处理方式，此方式基于AOP代理,可以将具体业务逻辑与事务处理进行解耦。也就是让我们的业务代码逻辑不受污染或少量污染,就可以实现事务控制。")]),a._v(" "),t("h2",{attrs:{id:"事务控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务控制"}},[a._v("#")]),a._v(" 事务控制")]),a._v(" "),t("p",[a._v("SpringBoot工程中，可以通过@"),t("a",{attrs:{href:"https://so.csdn.net/so/search?q=Transactional&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[a._v("Transactional"),t("OutboundLink")],1),a._v("注解描述业务类或方法，进而告诉Spring框架，类中的所有方法或某些方法为切入点方法。这些方法执行时会进行事务控制。例如：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Transactional")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("readOnly "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("rollbackFor "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Throwable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("XxxServiceImpl")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("XxxService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Transactional")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("readOnly"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//方法上的事务控制策略优先级高")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("deleteById")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("12345")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("其中，@Transactional常用属性有：")]),a._v(" "),t("ul",[t("li",[a._v("timeout：事务的超时时间，默认值为-1,表示没有超时显示。如果配置了具体时间,则 超过该时间限制但事务还没有完成，则自动回滚事务。这个时间的记录方式是在事务 开启以后到 sql 语句执行之前。")]),a._v(" "),t("li",[a._v("read-only：指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的 方法，比如读取数据，可以设置 read-only 为 true。对添加，修改，删除业务 readonly 的值应该为 false。")]),a._v(" "),t("li",[a._v("rollback-for：用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指 定，各类型之间可以通过逗号分隔。")]),a._v(" "),t("li",[a._v("no-rollback- for: 抛出 no-rollback-for 指定的异常类型，不回滚事务。")]),a._v(" "),t("li",[a._v("isolation 事务的隔离级别，默认值采用 DEFAULT。当多个事务并发执行时，可能会 出现脏读，不可重复读，幻读等现象时，但假如不希望出现这些现象可考虑修改事务 的隔离级别(但隔离级别越高并发就会越小，性能就会越差)")])]),a._v(" "),t("h2",{attrs:{id:"事务控制原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务控制原理"}},[a._v("#")]),a._v(" 事务控制原理")]),a._v(" "),t("p",[a._v("Spring 事务管理是基于接口代理（JDK）或动态字节码（CGLIB）技术，然后通过 "),t("a",{attrs:{href:"https://so.csdn.net/so/search?q=AOP&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[a._v("AOP"),t("OutboundLink")],1),a._v(" 实 施事务增强的。当我们执行添加了事务特性的目标方式时，系统会通过目标对象的代理对 象调用 DataSourceTransactionManager 对象，在事务开始的时，执行 doBegin 方法， 事务结束时执行 doCommit 或 doRollback 方法。如图所示：\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/92a0ef6b3a454a14b5aad4d37ca2f0dc.png",alt:"在这里插入图片描述"}})]),a._v(" "),t("h1",{attrs:{id:"总结-summary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-summary"}},[a._v("#")]),a._v(" 总结(Summary)")]),a._v(" "),t("p",[a._v("SpringBoot工程中的事务控制方式应用相对比较简单，但底层实现原理相对比较复杂，先应用，后续逐步分析其实现原理即可。")])])}),[],!1,null,null,null);s.default=r.exports}}]);