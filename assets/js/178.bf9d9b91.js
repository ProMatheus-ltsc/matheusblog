(window.webpackJsonp=window.webpackJsonp||[]).push([[178],{1447:function(a,s,t){"use strict";t.r(s);var i=t(24),n=Object(i.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"jconsole-应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jconsole-应用"}},[a._v("#")]),a._v(" Jconsole 应用")]),a._v(" "),t("p",[a._v("JConsole 是一个内置 Java 性能分析器，可以从命令行（直接输入jconsole）或在 GUI shell （jdk\\bin下打开）中运行。\n它用于对JVM中内存，线程和类等的监控。它可以监控本地的jvm，也可以监控远程的jvm，也可以同时监控几个jvm。\n这款工具的好处在于，占用系统资源少，而且结合Jstat，可以有效监控到java内存的变动情况，以及引起变动的原因。\n在项目追踪内存泄露问题时，很实用，如图所示。\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/e2954fc2ded643c0a1c19e2053afe17b.png",alt:"在这里插入图片描述"}})]),a._v(" "),t("h1",{attrs:{id:"jvisualvm应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvisualvm应用"}},[a._v("#")]),a._v(" JvisualVM应用")]),a._v(" "),t("h2",{attrs:{id:"启动jvisualvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动jvisualvm"}},[a._v("#")]),a._v(" 启动JvisualVM")]),a._v(" "),t("p",[a._v("JVisualVM是JDK自带的内存及性能检测工具，路径在%JAVA_HOME%/bin下面。")]),a._v(" "),t("p",[a._v("第一步：打开jvisualvm软件。\n双击jvisualvm.exe或者win + R 输入cmd，然后进入命令行界面，再输入jvisualvm即可打开软件。例如：\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/33b055c13e4a499ab84d5b57ca474725.png",alt:"在这里插入图片描述"}})]),a._v(" "),t("p",[a._v("我们可以选择本地或远程进程，然后进行监控，例如：\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/59f6ea560e4046e08d48b311478a8fbc.png",alt:"在这里插入图片描述"}})]),a._v(" "),t("h2",{attrs:{id:"安装visualgc插件。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装visualgc插件。"}},[a._v("#")]),a._v(" 安装VIsualGC插件。")]),a._v(" "),t("p",[a._v("VisualGC插件，是能够让我们通过图形化的页面，来查看我们的堆内存，以及各区使用情况。官方地址如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("https://visualvm.github.io/pluginscenters.html\n1\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("打开官方地址，找到与自己JDK版本匹配的VisualGC,并复制url，例如：\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/53cb681b4224447faad3bfe1bbbb398a.png",alt:"在这里插入图片描述"}}),a._v("\n打开VisualVM工具/插件，选择设置，然后找到编辑按钮，例如：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/79715433fb014202b5c01f6427be1f4d.png",alt:"在这里插入图片描述"}}),a._v("\n点击编辑按钮，将复制的VisualGC地址，拷贝到url位置，然后点击确定，例如：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/0c0a90e45d614aeaa5106d2c00b89f6c.png",alt:"在这里插入图片描述"}}),a._v("\n接下来打开可用插件，选择Visual GC，点击安装即可，例如：\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/b75f972ce3244220a5640b7b29781122.png",alt:"在这里插入图片描述"}}),a._v("\n说明，安装完成后重启VisualVM，在安装过程中可能会因为网络原因出现一些错误，不断尝试即可，或者选择离线安装。将下载好的VisualGC 拷贝到VisualVM目录，例如")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/9de19d03e5104e59b229188c9a01799e.png",alt:"在这里插入图片描述"}}),a._v("\n然后在VisualVM插件/已下载选项下添加插件安装即可，例如：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/a0cdd22c30584dae9b27fe315ea01536.png",alt:"在这里插入图片描述"}})]),a._v(" "),t("h2",{attrs:{id:"基于jvisualvm进行内存分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于jvisualvm进行内存分析"}},[a._v("#")]),a._v(" 基于JvisualVM进行内存分析")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/4acec982a1114a7484eed002a3fa7e5f.png",alt:"在这里插入图片描述"}})]),a._v(" "),t("h2",{attrs:{id:"jprofiler应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jprofiler应用"}},[a._v("#")]),a._v(" Jprofiler应用")]),a._v(" "),t("p",[a._v("自己进行查阅了解")]),a._v(" "),t("h1",{attrs:{id:"总结-summary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-summary"}},[a._v("#")]),a._v(" 总结（Summary）")]),a._v(" "),t("p",[a._v("本小节重点分享了有关几个JVM工具的安装以及简易应用，具体详细应用，需要关注后续章节。")])])}),[],!1,null,null,null);s.default=n.exports}}]);